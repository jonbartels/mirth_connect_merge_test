<channel version="3.5.0">
  <id>4142c640-fa4e-49cd-9915-97c7821c6212</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>ZOPS-28 Base</name>
  <description>An empty channel to test simple cases</description>
  <revision>2</revision>
  <sourceConnector version="3.5.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.5.0">
      <pluginProperties/>
      <sourceConnectorProperties version="3.5.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.5.0">
      <elements/>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.5.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.5.0">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.5.0">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.5.0">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.5.0">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.5.0">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.5.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.5.0">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.5.0">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.5.0">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.5.0">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.5.0">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.5.0">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.5.0">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.5.0">
        <elements/>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.5.0">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.5.0">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.5.0">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.5.0">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.5.0">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.5.0">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.5.0">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.5.0">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.5.0">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.5.0">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.0">
        <elements/>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.5.0">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.5.0">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.5.0">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.5.0">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.5.0">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.5.0">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.5.0">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.5.0">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.5.0">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.5.0">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.0">
        <elements/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;

//im making some changes here</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.5.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.5.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1507900457760</time>
        <timezone>America/New_York</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.5.0">
        <id>78adb062-c640-411f-98fb-df06454fbd18</id>
        <name>UHIN Code Templates</name>
        <revision>7</revision>
        <lastModified>
          <time>1505341319700</time>
          <timezone>Universal</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>9b0af3b7-81c5-40b6-b86a-42e2d724adf6</string>
          <string>99ae0d4f-8a1e-4867-a717-1ef13ce213ce</string>
          <string>e5d4ed3a-6f1a-4a96-bffd-50500199158e</string>
          <string>c546b178-2b18-454d-98f4-6d0ca5c5aa8e</string>
          <string>fd7be77e-eba1-4bc7-a9f4-827c65090193</string>
          <string>bb82cf68-ecdc-42a0-99cb-361ac758dda4</string>
          <string>6fe5bc84-99a8-408b-bb20-d31c745e78ac</string>
          <string>37be2682-ddde-4f3f-b81a-323fb3b074c1</string>
          <string>d0b4e2ae-aa5d-4053-90a4-58ae316740c7</string>
          <string>cbce856b-94e6-41f2-ba1f-a9f066c55ccb</string>
          <string>9ead813f-b2d7-4649-80b0-9c1bc667e10d</string>
          <string>d9ec9524-c802-4fd3-8785-075b680c0d5c</string>
          <string>672036b7-c54a-4b8e-b184-d38ab73e211c</string>
          <string>2f9955ca-3dd2-4b74-9bd5-eb71696d246a</string>
          <string>0630a4c0-9c95-4873-a997-357ae749545c</string>
          <string>ccf73719-48e1-443e-9320-8b01f56f58dc</string>
          <string>e40af7d1-4add-4098-8f17-48aa47a4a3d0</string>
          <string>2fb57cba-c097-45ff-b443-8cf295c98440</string>
          <string>b200ccf5-8804-44c9-bfda-29d37e44b7bc</string>
          <string>6452c377-a763-4ea9-8c12-a3165f245d30</string>
          <string>997b92c8-1a49-49d0-b8da-cf70b7eb9f32</string>
          <string>a9e261b0-3857-4087-b1af-2b1d45830078</string>
          <string>dfa2382f-3980-467e-a2c1-874914caafec</string>
          <string>2222bd1d-02ac-4c60-9002-14284766a05a</string>
          <string>62059fde-fc76-4e08-8ffb-80143b7af3b9</string>
          <string>8f7e1c19-10ce-45e8-b127-5b00ea739d81</string>
          <string>0d48368a-7691-49f9-b577-58ed15c0d712</string>
          <string>7571981b-4cc9-4910-a3b8-94f5a36dbc4c</string>
          <string>93a89e5c-7189-42ee-89b7-4efd8819158d</string>
          <string>15406c5a-a6a8-40fd-812d-e2aabf0bbb76</string>
          <string>a631a901-62a2-4e28-a0f6-cbe22be9b3ce</string>
          <string>d85dc969-d7a7-4197-86c4-279d9242c0bd</string>
          <string>11901c83-41b3-4997-94bb-ca8f209f78d7</string>
          <string>9065b3cc-d298-43ac-8e69-512aaec2988c</string>
          <string>cd6add69-5077-4c57-beb3-3686adaa9130</string>
          <string>a8daab77-2eeb-4bbb-af17-f3b20a2f48e4</string>
          <string>e9730802-f572-4428-aed2-14f4f73f7dc2</string>
          <string>18c48d98-686b-4fe7-b551-7d8d0d15fab7</string>
          <string>6ba6afb7-edfa-44d0-a0b1-5b899ba5e091</string>
          <string>c0fbe646-2308-4c90-9fc0-ae628baf8476</string>
          <string>d85d2589-3782-4476-bd3a-42bd9a0c3078</string>
          <string>d88f3c63-ae6e-4bfc-8c95-fadf526c025a</string>
          <string>2d04a99a-4998-486e-9317-74e7bfe8c456</string>
          <string>a45f0994-371b-4f01-9f0b-f49dca73cbb0</string>
          <string>6bbbf88e-8266-45af-bb8f-102c827db6e3</string>
          <string>2553f5d6-d28e-49e4-811f-6d4680bfb495</string>
          <string>78c8de46-8272-4156-82dc-e0b2680e67b2</string>
          <string>26cabf21-0dfb-4fac-8e0f-472e32768e2b</string>
          <string>1274e112-58af-4b46-a693-1415da0d1323</string>
          <string>ab3a6098-b5a4-4238-87f8-d91dd3acec13</string>
          <string>350fd5e9-3daa-4948-8020-61d0ef88d951</string>
          <string>73812dc9-c6b3-4b5b-942c-96190e5971ed</string>
          <string>047829b3-9884-4a6c-9adf-5d84d3593693</string>
          <string>31068e50-f7af-4031-a262-03f0d750a80a</string>
          <string>acd4645a-5188-48ec-b85e-aae403c29423</string>
          <string>d330c309-89d4-45c9-a246-d1638b287d69</string>
          <string>938a6b81-24a6-4a1c-b1d6-5c320f566c24</string>
          <string>8c3a70de-3146-40d2-83e2-6828af05273f</string>
          <string>858f13fe-8a33-4fbd-a324-4a298952b40d</string>
          <string>42e18435-df00-483f-b8c4-dfaeb00349ed</string>
          <string>15e6e54c-d2a4-434b-95ed-5ee697a8caf3</string>
          <string>0cf6e807-1473-4a65-a574-25b0b1fd7079</string>
          <string>60537205-f432-4b45-ab79-35d2876c1cda</string>
          <string>08972c62-54dc-4294-a5f0-cf8d72019e75</string>
          <string>43ed3d7e-9ea8-4989-ae92-e755af150a2f</string>
          <string>20b33dae-23ca-4ca3-b9cb-b7e401ad3274</string>
          <string>6fec51ea-788b-4a3b-b9fb-723fe8eb5e88</string>
          <string>69378fdb-f4c0-4c61-8e25-2e44226ab3f5</string>
          <string>c92aea98-c3cb-484b-aff5-433f41dd1c8e</string>
          <string>31794022-8aca-4b66-a7ec-a6511cff8eb0</string>
          <string>3b1864ca-d319-4c8c-9d50-c6348fb4bd6d</string>
          <string>632de6e3-aa63-4352-9c5d-04b31d15b9dd</string>
          <string>bc30da58-f9e0-47e2-adf7-18ec814f2cc2</string>
          <string>301df9bc-cd2a-4d06-aeab-ded20b8862c2</string>
          <string>a7954ddd-c3c4-4a91-9c80-f2cc7b3b7b40</string>
          <string>c07adb32-8f9b-4689-b399-40e8104e9b33</string>
          <string>4eba15be-9098-414f-93cf-f7237caef118</string>
          <string>ed2b660f-0e10-4ea7-ab2a-8cfedf858a2f</string>
          <string>61cdda48-c122-4428-9a8f-b9699103e4f6</string>
          <string>0fbe2143-8983-4da6-bd24-4e1c7cea8511</string>
          <string>04d707aa-dfb5-4c9d-84d1-436dd8313a50</string>
          <string>d60e3280-6bae-4a58-b97c-3306d08aa436</string>
          <string>0233a81b-7357-4775-b19e-55f5f23a367e</string>
          <string>12829fa8-b09e-4452-902b-979bb79f6fac</string>
          <string>f5b6d8a8-6223-4417-8001-2d80a88b41ef</string>
          <string>9d8641ff-4f2a-40d4-b904-dbc80c19458a</string>
          <string>dc61c370-fdb3-4dad-b2fb-fb5c386ebc35</string>
          <string>c5684a1c-2966-4ca9-9bc7-095ba03efb54</string>
          <string>2b1b6766-a09a-4fbb-832e-0c30884fd3fa</string>
          <string>36c8642e-60ee-49e3-85ad-5079a69a21c0</string>
          <string>9267a64b-1a86-41b2-8b38-94cd9c0d551b</string>
          <string>ed87e77d-2fa2-4e1d-9032-b71fca82f630</string>
          <string>b567b2c7-181f-4561-8bd1-f98d6553568a</string>
          <string>417bbf13-4627-42e0-96da-6872e126c26b</string>
          <string>bef963ec-8be5-4a34-a99c-249cba167da9</string>
          <string>3664f562-b6f0-468f-b53b-10af82414ae3</string>
          <string>98cdec0c-0fd6-4cea-9c03-f5b98bc28bb1</string>
          <string>eb533c63-28ee-4e0e-868c-9c7201473a7a</string>
          <string>882d8dd0-bd7c-4eb2-91d1-e43fb1a4a9af</string>
          <string>d74cbcd5-876a-4c4e-9943-b7fd6583f4f5</string>
          <string>78a04664-8298-45a5-b15d-8b7e82c7be2a</string>
          <string>e80d6b00-3e01-43e1-b296-fef95b2a2409</string>
          <string>08b2a873-631a-431c-8b54-c9f5af447cdb</string>
          <string>8fa357a7-69e0-4b97-ba89-8e4d429fe8c9</string>
          <string>0436d77d-070d-41b2-a82e-3c0b4c9e7cba</string>
          <string>3ebe30fe-790b-41cb-aaa7-3c5c94a9cab3</string>
          <string>007aca02-9518-4831-b335-bc455b017d6d</string>
          <string>66749f2a-0e89-4c14-9b9e-1b49f976df8e</string>
          <string>a23f7d2b-a253-47fc-ab6c-611a4c65a155</string>
          <string>927439cb-8e46-4bad-8708-7b29e2b26eab</string>
          <string>370d3515-1fba-4b72-bd6b-f110150d8ecc</string>
          <string>ad366348-2e11-4688-bb1b-f00fd4f65e18</string>
          <string>330931f0-920f-46cb-b004-cbe27ec9e96b</string>
          <string>e28e36da-73d9-451f-a39e-3f6fbfc78294</string>
          <string>794815f6-8787-4a6e-85c9-4af43ed3276d</string>
          <string>8c6400df-7c02-4e51-878a-332eb71523bf</string>
          <string>91f40e7b-fe65-4ccf-9b6d-5de08f07d8fb</string>
          <string>c6d135b6-f592-4869-8d0e-513d6cab3637</string>
          <string>1494d843-a50f-4fe0-8e11-da59b4a84198</string>
          <string>f0a2a79e-94f2-45b2-b4ce-7205457464ed</string>
          <string>af116122-d952-4a18-80cb-2cb840ffbed9</string>
          <string>6de177ac-8ce8-494b-8678-7d2e549d2fdb</string>
          <string>e10c1fb3-d771-417b-a1da-159f2cfa9209</string>
          <string>3f4afdfe-d059-41aa-9e33-067a602b411a</string>
          <string>2775a23e-1d11-4b73-b2b9-13f277b24824</string>
          <string>71bc649b-9ab0-4469-accf-ce40a8b4dfa2</string>
          <string>61dc6d63-e04e-40c3-95a6-88649a60ba4a</string>
          <string>db13578a-8cdf-412b-b724-c532d601ff44</string>
          <string>7a666282-d6ca-4156-8663-054c89e1fd3b</string>
          <string>eddbaa97-45a7-4e2a-ae15-aadd6f9a8243</string>
          <string>e956d35b-ad17-40d4-8108-1bba2a3b10e0</string>
          <string>7f7099d1-09a4-4648-b87c-ac5240205bad</string>
          <string>1252fd34-43f3-4d8d-9299-f9186ba87454</string>
          <string>f3d4d14f-e084-41c1-b906-543ba5aea145</string>
          <string>01179c8f-8f44-4efc-8353-cb7ca8e9bfa2</string>
          <string>9fadd7c4-4e5c-44fe-9d2d-d3a3b13a0ef6</string>
          <string>dbbbbb21-f9a9-48b3-a462-f3f55d8c764e</string>
          <string>1295b7e6-4222-48a5-ab0f-a9377054364c</string>
          <string>a1df2257-9593-4cbb-a9d0-58912b3b6d38</string>
          <string>b7851fcd-cb89-472f-ae8b-6c6e585bf24d</string>
          <string>caff1442-e717-4c62-81f1-da0f4a99795c</string>
          <string>49c184cb-14f2-4fa6-a248-2c35421e164d</string>
          <string>8e7bcc12-41a6-44ba-84a0-2a1226942c4e</string>
          <string>318c60c4-b84f-4eda-8eb7-117bf13c36f6</string>
          <string>8aad9fbd-8c79-4755-bf62-2c8f0d628ab6</string>
          <string>d44392aa-cd84-4e09-b58d-e4f59ff02aa2</string>
          <string>dfe8bb8e-04f9-4100-b302-c8639e36e021</string>
          <string>55c8b338-616d-4571-927a-6c1bd4e44550</string>
          <string>b121da37-82a1-4d89-b96d-ef148c6af11b</string>
          <string>d96bb6c6-47c7-4033-979c-95b6435ae9fc</string>
          <string>eafe4096-db8e-4b7f-ae2e-c18b10f02c5e</string>
          <string>41938b62-b9c9-4e00-9a09-b54804850bdc</string>
          <string>6656736b-13ff-4a98-a46c-dfaf5f3f07b2</string>
          <string>e5bfd438-063a-4f7b-9952-26058437442c</string>
          <string>425d3678-38d5-465c-aec5-b31c506f5060</string>
          <string>4629f2bf-5459-46bc-9d2e-600d8b80dc35</string>
          <string>f8cfe11a-eae1-47ad-ac22-b9e638f6777a</string>
          <string>cc06246c-de8f-4030-a620-85835da865df</string>
          <string>8f6b911b-8890-48e6-8187-0b7fef124adf</string>
          <string>e5bccb62-cf05-4827-bde6-7eeae8f3b6f6</string>
          <string>e6d2e3f3-ee15-46bc-88c0-0ad0a2a67c7c</string>
          <string>ed39f4cc-8527-45b8-b3b1-4b181ffad853</string>
          <string>0522d0e5-348b-421b-8956-77842682a36c</string>
          <string>3c51a485-ba9d-4e7a-b969-9718561bf76f</string>
          <string>2304a533-29f3-4dce-9ea9-09585c1009ab</string>
          <string>196d6e34-e5f0-47d7-bc14-5952af84d315</string>
          <string>052ed721-f563-447c-85e0-5d8edb3ec3ff</string>
          <string>06741fce-f0af-4788-97d9-8c17f735710c</string>
          <string>35407077-029b-4ead-934c-ebe46a40e818</string>
          <string>3fe5c7a9-d6a9-4b8b-b8ef-444f286e103d</string>
          <string>bbd8cfbf-5329-4076-82ba-1dd06e059020</string>
          <string>361d8a7c-e1e0-4d79-b454-0df160e7eb0b</string>
          <string>9dec0b4d-fc70-4ba7-b0ee-bca96a095d0e</string>
          <string>cbbcc80b-0ddc-4a78-a047-b597dd0b11fe</string>
          <string>b18ea01d-165c-4617-ab85-d0c14a2a32f2</string>
          <string>6286e01a-caea-4fe8-bf88-3bf83fa535a1</string>
          <string>3c8e46f0-20a1-4d56-b7cf-77e3381d501a</string>
          <string>8ec2e7f0-b268-4625-963f-6aa17136de1d</string>
          <string>44a20343-99c3-49c7-bff2-c199bf9fc1cd</string>
          <string>5ea109c6-42a8-4d2b-b783-e0cb4a12d922</string>
          <string>7f7aa51f-da59-4d7e-829d-d1311983bef7</string>
          <string>22d93f5a-1522-4fbc-8cdb-36c633a36b87</string>
          <string>06a247cc-5616-4486-877f-2c5c84bc630b</string>
          <string>07568095-3b6a-48a4-8714-615f94fc6adf</string>
          <string>c7839d8a-8309-4f4c-abc6-f3d7c0e241f5</string>
          <string>7ae77967-4208-4e66-9b2f-b175f8946333</string>
          <string>74561afb-b1d7-4ef7-940d-ead722c0986c</string>
          <string>19dfd08b-0928-4b9e-b92c-2ee357f5d445</string>
          <string>f2d5a5be-5e63-499a-a8ba-5e58fb1a2184</string>
          <string>03ec7872-bec4-4ddb-b3e6-c9bc9dd1a0c2</string>
          <string>cebb1fdd-452a-4e77-8bfe-932a01feed04</string>
          <string>01ea4556-ee1e-4be8-9606-27d1558c830d</string>
          <string>e01dddea-0236-4cf4-84c9-6a073319e419</string>
          <string>b5bf109f-ae24-45e8-953c-3b94d3b031d2</string>
          <string>aaa8bc49-0faa-4bac-bd4f-1505bd7fac3e</string>
          <string>f3104e09-8719-4cd8-9316-7318d84fc7f6</string>
          <string>f155f8f3-7328-4efd-91b8-45c1b6114d1a</string>
          <string>284289ae-d3a0-4aaa-b745-c6900c73f8cf</string>
          <string>9501e343-4b13-431b-9276-c8383995cfd2</string>
          <string>6f249946-9905-4329-87ba-cfc31b666768</string>
          <string>20b5232a-8ba7-4133-8665-2597420da75c</string>
          <string>6167d26c-a408-441e-a9ce-5172a06ebae2</string>
          <string>a85ef364-1c4f-493e-ba4f-5781569c3844</string>
          <string>35b0ce3c-6281-45eb-aee9-78df76a5f472</string>
          <string>40498031-d8f2-4ada-b267-45331ea57295</string>
          <string>0cfce324-1616-4141-88e1-60af9b66c8c0</string>
          <string>e16ec809-173a-4fa5-bcf1-cc8d02dd71d6</string>
          <string>dc890fa5-62bb-4809-a546-3b2345395275</string>
          <string>71e0e8cc-d93d-43b6-b295-1f735a904de0</string>
          <string>f0202bea-a79d-450b-b374-78215c7b029b</string>
          <string>260c4139-6ead-487d-aa23-c027f3a293cf</string>
          <string>859583a8-95ae-4923-a944-03aa8f88c581</string>
          <string>92b8eb6d-a030-401a-8603-f663e62a31a7</string>
          <string>f2f808c8-b4d4-43f4-8e4d-3b30bd1126a5</string>
          <string>6b74be55-5907-4e99-b1b3-d194c1d568a6</string>
          <string>d6727fb5-0ccf-438a-81f4-95795d4ec416</string>
          <string>20d76318-4790-494d-b629-f01c59823e93</string>
          <string>5f4a6cd9-1339-4718-97b8-3a058766ada6</string>
          <string>24d0feb1-7dd5-48b7-a551-a96cecf26f61</string>
          <string>0483a295-a87b-4028-9579-cc9cc10f8e82</string>
          <string>3528b330-97c3-41b8-abc7-58c6600b97ec</string>
          <string>5a3029ee-beb3-4c0e-ab25-6e28317f985a</string>
          <string>a04df1cf-bbcd-46aa-b3af-656496294dbc</string>
          <string>84610f46-531b-4dda-a451-066c35bf4c2d</string>
          <string>68e0ef23-2d68-45fd-8ac4-f8c8ddcd4664</string>
          <string>a44bcf86-825f-4ff7-8d2c-4708d3418ff4</string>
          <string>e0ba308c-8855-48e1-b61d-bcf83abec7fd</string>
          <string>62f91b66-f5f0-419d-83bc-1847f4ded5b1</string>
          <string>fa6694db-b64e-4dc7-8dcf-61c12e8cb5be</string>
          <string>062dddd7-a375-41bb-a950-1c9c537d1c0a</string>
          <string>4f517979-ee90-461b-ba6f-5e88e6c21190</string>
          <string>f68436c9-d9cc-4d72-8b94-f5a18476927d</string>
          <string>0ff3919f-2ef1-43b8-9c54-d2e6e392ef44</string>
          <string>7adb6f1e-2548-441c-8dd2-68f93a904494</string>
          <string>252d6864-7ca5-41b2-bcbc-0f7aacdefb4e</string>
          <string>f528dd63-cf95-4d09-843a-4e7c91316336</string>
          <string>d769ff18-c119-4a95-b807-ce3272bf6678</string>
          <string>d5879d57-08fd-4c45-bdc6-8530ada2119d</string>
          <string>438535c1-14d5-4846-8cfd-8b4f7fcd410a</string>
          <string>e544fe61-342c-4e6f-9f03-02a086ded0b9</string>
          <string>36cc1f5d-8074-4ea9-8f1a-b13a8961e6f9</string>
          <string>c2a50e66-4235-455f-b5a9-8c0c61377212</string>
          <string>875bd55a-7da7-490e-a09e-cd87c20f7506</string>
          <string>ee1ea974-5d8c-4f43-9c1e-920f6bfa7cc6</string>
          <string>594a98c8-3130-4419-acf8-e939613487b6</string>
          <string>3141675e-25d4-449b-99fa-7fe7cffcbc66</string>
          <string>a9c11080-2b51-4ecc-b2d5-3841361319cd</string>
          <string>d65823c6-fceb-41d6-9cf6-fdaf886caa62</string>
          <string>5ad2f0ee-2b3f-49b9-96c1-0029f476fccf</string>
          <string>d1ce09fa-95c3-45ab-b28d-b23bb12c76bb</string>
          <string>3814b46c-ac5b-4edd-bb83-0c641207511b</string>
          <string>2f30c724-874a-4e9d-a6ae-2ae3822d52f6</string>
          <string>ac470a7d-b38f-4d15-90f3-217e6ef062b2</string>
          <string>b1926e53-7ed7-4549-b605-07d84e75d0c9</string>
          <string>a4ea6f6f-0eec-4207-9ed3-11e89f147c39</string>
          <string>b9d8ffef-0f45-4efe-95e6-31f8eba5313e</string>
          <string>78dc2d48-8e93-4ff2-8db5-7305106e01e3</string>
          <string>f62ff0a5-251d-41e9-bc5b-ac23b4a225a5</string>
          <string>9365eea6-8578-43e8-ab80-70b135ab8ac7</string>
          <string>1e4ff48b-c4f7-4b80-8482-0c410278ead9</string>
          <string>5e5caf85-88c3-49a3-81a0-5485f6ae6aaa</string>
          <string>3e4bf110-c39d-44da-85c3-5fcb88054c64</string>
          <string>cb87de41-c231-4fc2-88af-0b8ae6878e2b</string>
          <string>7c21c4b7-fdcb-458d-8ed0-4971ab456961</string>
          <string>2be52083-1331-4184-a4fa-9ed3094e4cf4</string>
          <string>d59fbcd2-acde-4fe1-bfa7-5dba8274001a</string>
          <string>c51c3f6c-ba2c-4d62-8932-1b6e358728e8</string>
          <string>8119f2f3-23d9-498d-8f02-4a992fa35c53</string>
          <string>c96b4863-74f4-4d54-8481-f5b93a962212</string>
          <string>b34fdf6d-bdcf-4b82-ab71-57b7c87e2820</string>
          <string>9e714156-2645-488e-95da-844a724cda64</string>
          <string>d6a311cd-fdce-4222-8ba2-81a208e7c2ea</string>
          <string>a1311550-e344-4fed-9f24-c27f74a78d6a</string>
          <string>c79a02cf-1287-4e83-a1bf-0ef0e5c860c5</string>
          <string>1e08a48c-61b3-49fd-8ebb-56a54470dc41</string>
          <string>1015171d-3169-49a0-bb50-761f8ddec95a</string>
          <string>1c9c17b9-fa83-43d1-8e66-a715d5d99c0d</string>
          <string>b8d9ad37-34e6-485a-9efc-6ce4fa84396b</string>
          <string>2ee0aeaf-155d-49c8-a68e-0c866bc43f0a</string>
          <string>3bb2a3de-d709-4cc4-9aab-421d32934444</string>
          <string>895d2a70-f93c-410b-8771-14dfcad210f5</string>
          <string>0138e176-4a04-4074-9f72-2f8332482efe</string>
          <string>f6aaa3fc-eb64-4712-8a95-70b1e52ab048</string>
          <string>10e3bd46-c5c0-4f11-990d-88b0ae2499ee</string>
          <string>31a0039a-974f-4446-a0de-2c8a9044db52</string>
          <string>223020ad-77d1-46c7-a943-b4ed9a3e791d</string>
          <string>6844e51c-d2dd-439a-a96c-523a80bc1ae2</string>
          <string>46b0a7c0-bfdb-46db-adec-c4a61122d637</string>
          <string>5b99a956-1176-4c56-b500-5e5ffce2f06e</string>
          <string>5ab9907c-4d4d-42ea-b4fd-9ce38a473881</string>
          <string>47658736-075d-46f3-988d-b4f8463b1902</string>
          <string>7cb3f234-53d6-4074-ac3b-dda99727f555</string>
          <string>13a09ebf-27b8-4505-a741-b92905bbbc04</string>
          <string>01829d8c-5dd0-425d-bfa2-4523911fb259</string>
          <string>c7872c67-d977-46da-b12c-403365e60e11</string>
          <string>4f90e6a5-2efd-4426-9d48-4145d5fd25e1</string>
          <string>26a6f777-ebf7-4e47-8af2-c9244ae94dd1</string>
          <string>ea2203c9-aaf7-4ca7-835b-9c09b119a10c</string>
          <string>333a824f-7960-4909-8ce0-0d0806df66ee</string>
          <string>1b2c140f-70b0-443a-a1b3-f88bd10d631b</string>
          <string>1f7b86af-5022-4c98-a237-b5e349eaf158</string>
          <string>e6e8e7c6-846e-4dd6-9b41-656fe1cf3b19</string>
          <string>9faa0233-9f87-4a77-94da-b525e0ef59c9</string>
          <string>515dc74a-806e-4647-8c18-7f8be653afa3</string>
          <string>d57e81c9-fafb-459e-8af5-d46ce2988fb6</string>
          <string>9c413df6-33ef-4d31-b25a-2d025e113b49</string>
          <string>dfde4f9b-07a7-4d24-b18e-9a9ec527365d</string>
          <string>4f870139-2658-4527-b4ca-2c91f5cbb126</string>
          <string>9b2277fd-30ac-485f-82e8-f8f23cdd3f8e</string>
          <string>89e95e22-f986-4d9d-8d6d-824870f05b09</string>
          <string>89f387cf-bb43-4d5b-8e47-eed6babf9dab</string>
          <string>9e842013-430b-4d4e-9cc5-c86899952560</string>
          <string>cd7ea509-32f8-46e6-a4fd-af39ff193b11</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>26ef13c4-e40e-49e5-b2c0-a2649ae1777b</string>
          <string>d00e18dd-40ab-444f-8fc3-403dcec998d4</string>
          <string>05760683-1be3-4a1b-a7a1-494216991c0a</string>
          <string>c6872de5-ee7f-4877-8e2a-3702cd116e7f</string>
          <string>d56a0564-6194-4e0e-8ae8-deafb61ab9d7</string>
          <string>1f88d993-318a-4612-af10-1f3b272e9559</string>
          <string>96eee48c-532d-4aef-9a44-d6dd5f2787a3</string>
          <string>04c9dbf8-fec8-4eaa-adb3-6eb6b88c2f52</string>
          <string>c76489d8-b563-4807-96a1-70832552ca79</string>
          <string>4978a670-b82c-4b52-9876-8a63588b60e5</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.5.0">
            <id>77b6e74e-03ce-480a-aa16-211ce46a7336</id>
            <name>addManufacturerOrganizationIDInImmunizationSection</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222031</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will add an ID to the manufacturedOrganization section of Immunizations

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function addManufacturerOrganizationIDInImmunizationSection(arg1) {
//CJ 1/21/2016 This code will add an ID to the manufacturedOrganization section of Immunizations
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 11369-6 which means the section is for Immunization
		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;11369-6&apos;) {
//iterate through each entry of the Immunizations section
		var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			for (var j=0;j&lt;entryLen;j++) {
//iterate through each consumable manufacturerOrganization of the entry

				var manufacturerOrganizationLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;].length();
				for (var k=0;k&lt;manufacturerOrganizationLen;k++) {
//if the id for the manufacturerOrganization is blank then create from the standardIndustryClassCode Code
					var manufacturerOrganizationID = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;][k][&apos;id&apos;][&apos;@extension&apos;].toString();
					if (manufacturerOrganizationID === &apos;&apos;) {
						var standardIndustryClassCode = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;][k][&apos;standardIndustryClassCode&apos;][&apos;@code&apos;].toString();
						if (standardIndustryClassCode === &apos;&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;][k][&apos;id&apos;][&apos;@extension&apos;] = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;][k][&apos;name&apos;].toString();
						}
					else {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;][k][&apos;id&apos;][&apos;@root&apos;] = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;][k][&apos;standardIndustryClassCode&apos;][&apos;@codeSystem&apos;].toString();
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;][k][&apos;id&apos;][&apos;@extension&apos;] = standardIndustryClassCode.toString();
					}
					}
				break;
				}
			break;
			}
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>3356d8c5-02da-4ebf-a64e-5f8026900927</id>
            <name>CDACleanupforHL7TRN</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223163</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Chetan 12/2/2016 
	
	Putting the general code for clean up the CCD or Delete blank or empty nodes before transforming to TRN HL7 message

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function CDACleanupforHL7TRN(CDA) {
    try {
        var pvLname = &apos;&apos; + msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString();
    } catch (err) {
        var pvLname = &apos;&apos;;
    }
    if (pvLname.length == 0) {
        delete msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][&apos;assignedEntity&apos;];
    }

    try {
        var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
    } catch (err) {
        var compLen = 0;
    }
    for (var i = 0; i &lt; compLen; i++) {

        try {
            var compTitle = &apos;&apos; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
        } catch (err) {
            var compTitle = &apos;&apos;;
        }
        if (compTitle.length == 0) {
            try {
                var compTitle = &apos;&apos; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
            } catch (err) {
                var compTitle = &apos;&apos;;
            }
        }

        if ((compTitle == &apos;30954-2&apos;) || compTitle.toUpperCase() == &apos;LAB RESULTS&apos;) {
            try {
                var compText = &apos;&apos; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;content&apos;].toString();
                compText = compText.toUpperCase();
            } catch (err) {
                var compText = &apos;&apos;;
            }
            if (compText.search(&apos;NO LAB RESULT&apos;) != -1) {
                delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
                break;
            }
        }
    }

    try {
        var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
    } catch (err) {
        var compLen = 0;
    }
    for (var i = 0; i &lt; compLen; i++) {

        try {
            var compTitle = &apos;&apos; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
        } catch (err) {
            var compTitle = &apos;&apos;;
        }
        if (compTitle.length == 0) {
            try {
                var compTitle = &apos;&apos; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
            } catch (err) {
                var compTitle = &apos;&apos;;
            }
        }

        if ((compTitle == &apos;48768-6&apos;) || compTitle.toUpperCase() == &apos;INSURANCE&apos;) {
            delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
            break;
        }
    }
	
	return msg;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>3a108d96-fed9-4289-84f9-1dd16b1940a6</id>
            <name>changeStatusOfImmunizationIfNotGiven</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223482</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will change the Immunization Status to Pending if the Negation Indicator is True

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function changeStatusOfImmunizationIfNotGiven(arg1) {
//CJ 1/21/2016 This code will remove Unknown Allergies from Machine Readable portion of CCD
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 11369-6 which means the section is for Immunizations
		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;11369-6&apos;) {
//iterate through each entry of the Immunizations section
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			for (var j=0;j&lt;entryLen;j++) {
//find the Negation Indicator for the subastanceAdministration element
					var negationInd = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;@negationInd&apos;].toString();
					if (negationInd == &apos;true&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;statusCode&apos;][&apos;@code&apos;] = &apos;pending&apos;;
					}
				}
			}
		}
	}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>97bd76f3-af46-48d1-ad0e-6858787a54a0</id>
            <name>ConvertCDAtoHL7TRN</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222425</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Chetan 12/2/2016 
	
	Creating TRN message from Cleaned CDA message.

	@param {String} CDA - CDA to be converted
	@param {String} Fac - Facilty/datasource
	@return {String} returns the converted HL7 message.
*/
function ConvertCDAtoHL7TRN(msg,Fac) 
{

//Fetch Random number
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

var uuid = UUIDGenerator.getUUID();
channelMap.put(&apos;MessageKey&apos;, uuid);

var msgStr = connectorMessage.getRawData().toString();
msgStr = HL7_Encode_CDA(msgStr);

//Convert the CCD message into Base64 
var encoded = FileUtil.encode(new java.lang.String(msgStr).getBytes()).replaceAll(&apos; \\s&apos;,&apos;&apos;);

var encodedStr = &apos;&apos;+encoded.toString(); // Above adds line breaks
encodedStr = encodedStr.replace(/\r?\n|\r/g, &quot;&quot;);

//Make combination on Facility ID and DOB so that uniqueness of CCD would be maintain for each specific facility
//var dob = &apos;&apos;+msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;patient&apos;].*::[&apos;birthTime&apos;][&apos;@value&apos;].toString();
//var UniqueID = Fac + &apos;_&apos; + dob.substr(0,8);
// Rather than creating a unique ID, use the documentID of the CCD so that the HL7 can be linked to the CCD
//var uniqueID = msg.*::[&apos;id&apos;][&apos;@extension&apos;].toString();
var uniqueID = msg.*::[&apos;id&apos;][&apos;@extension&apos;].toString();
               
//Create HL7 messages
var newHl7msg = &lt;HL7Message/&gt;;

//Create MSH segment
//createSegment(&apos;MSH&apos;, newHl7msg);
newHl7msg.MSH[&apos;MSH.1&apos;] = &apos;|&apos;;
newHl7msg.MSH[&apos;MSH.2&apos;] = &apos;^~\\&amp;&apos;;
newHl7msg.MSH[&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = &apos;CCDA&apos;;
newHl7msg.MSH[&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = Fac;
newHl7msg.MSH[&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = &apos;UHIN&apos;;
newHl7msg.MSH[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;);
newHl7msg.MSH[&apos;MSH.9&apos;] = &apos;ORU^R01^2&apos;
newHl7msg.MSH[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;] = uniqueID;
newHl7msg.MSH[&apos;MSH.11&apos;][&apos;MSH.11.1&apos;] = &apos;P&apos;;
newHl7msg.MSH[&apos;MSH.12&apos;][&apos;MSH.12.1&apos;] = &apos;2.3.1&apos;;

//Create PID segment
createSegmentAfter(&apos;PID&apos;, newHl7msg[&apos;MSH&apos;]);
newHl7msg.PID[&apos;PID.1&apos;][&apos;PID.1.1&apos;] = &apos;1&apos;;
newHl7msg.PID[&apos;PID.3&apos;][&apos;PID.3.1&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;id&apos;][0][&apos;@extension&apos;].toString();
newHl7msg.PID[&apos;PID.3&apos;][&apos;PID.3.4&apos;] = Fac;
newHl7msg.PID[&apos;PID.5&apos;][&apos;PID.5.1&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;patient&apos;].*::[&apos;name&apos;].*::[&apos;family&apos;].toString();
newHl7msg.PID[&apos;PID.5&apos;][&apos;PID.5.2&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;patient&apos;].*::[&apos;name&apos;].*::[&apos;given&apos;][0].toString();
try {
	newHl7msg.PID[&apos;PID.5&apos;][&apos;PID.5.3&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;patient&apos;].*::[&apos;name&apos;].*::[&apos;given&apos;][1].toString();
} catch(err) {
	
}

var dob = &apos;&apos;+msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;patient&apos;].*::[&apos;birthTime&apos;][&apos;@value&apos;].toString();
if (dob.length &gt; 8) {
	newHl7msg.PID[&apos;PID.7&apos;][&apos;PID.7.1&apos;] = dob.substr(0,8);
} else if (dob.length == 8) {
	newHl7msg.PID[&apos;PID.7&apos;][&apos;PID.7.1&apos;] = dob;
}
var gender = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;patient&apos;].*::[&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();

if (gender == &apos;M&apos;) {
	newHl7msg.PID[&apos;PID.8&apos;][&apos;PID.8.1&apos;] = &apos;Male&apos;;
} else if (gender == &apos;F&apos;) {
	newHl7msg.PID[&apos;PID.8&apos;][&apos;PID.8.1&apos;] = &apos;Female&apos;;
} else {
	newHl7msg.PID[&apos;PID.8&apos;][&apos;PID.8.1&apos;] = &apos;Other&apos;;
}

newHl7msg.PID[&apos;PID.11&apos;][&apos;PID.11.1&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;addr&apos;].*::[&apos;streetAddressLine&apos;].toString();
newHl7msg.PID[&apos;PID.11&apos;][&apos;PID.11.3&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;addr&apos;].*::[&apos;city&apos;].toString();
newHl7msg.PID[&apos;PID.11&apos;][&apos;PID.11.4&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;addr&apos;].*::[&apos;state&apos;].toString();
newHl7msg.PID[&apos;PID.11&apos;][&apos;PID.11.5&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;addr&apos;].*::[&apos;postalCode&apos;].toString();
newHl7msg.PID[&apos;PID.11&apos;][&apos;PID.11.6&apos;] = msg.*::[&apos;recordTarget&apos;].*::[&apos;patientRole&apos;].*::[&apos;addr&apos;].*::[&apos;country&apos;].toString();

//Creating PV1 segment
createSegmentAfter(&apos;PV1&apos;, newHl7msg[&apos;PID&apos;]);
newHl7msg.PV1[&apos;PV1.1&apos;][&apos;PV1.1.1&apos;] = &apos;1&apos;;
newHl7msg.PV1[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;] = &apos;O&apos;;
newHl7msg.PV1[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = &apos;CCD_&apos;+ uniqueID;


//Create TXA segment
createSegmentAfter(&apos;TXA&apos;, newHl7msg[&apos;PV1&apos;]);
var dos = &apos;&apos;+msg.*::[&apos;effectiveTime&apos;][&apos;@value&apos;].toString();
if (dos.length &gt;= 12) {
	dos = dos.substr(0,12);
	newHl7msg.TXA[&apos;TXA.4&apos;][&apos;TXA.4.1&apos;] = dos;
	newHl7msg.TXA[&apos;TXA.6&apos;][&apos;TXA.6.1&apos;] = dos;
	newHl7msg.TXA[&apos;TXA.7&apos;][&apos;TXA.7.1&apos;] = dos;
	newHl7msg.TXA[&apos;TXA.8&apos;][&apos;TXA.8.1&apos;] = dos;
}
try {
	var pvID = &apos;&apos;+ msg.*::[&apos;documentationOf&apos;].*::[&apos;serviceEvent&apos;].*::[&apos;performer&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();
	var pvLname = &apos;&apos;+ msg.*::[&apos;documentationOf&apos;].*::[&apos;serviceEvent&apos;].*::[&apos;performer&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;assignedPerson&apos;][&apos;name&apos;].toString();
} catch(err) {
	var pvID = &apos;&apos;;
	var pvLname = &apos;&apos;;
}
newHl7msg.TXA[&apos;TXA.9&apos;] = &apos;&apos;;
newHl7msg.TXA[&apos;TXA.11&apos;] = &apos;&apos;;
if (pvLname.length &gt; 0) {
	newHl7msg.TXA[&apos;TXA.9&apos;][&apos;TXA.9.1&apos;] = pvID;
	newHl7msg.TXA[&apos;TXA.9&apos;][&apos;TXA.9.2&apos;] = pvLname;
	newHl7msg.TXA[&apos;TXA.11&apos;][&apos;TXA.11.1&apos;] = pvID;
	newHl7msg.TXA[&apos;TXA.11&apos;][&apos;TXA.11.2&apos;] = pvLname;	
}
newHl7msg.TXA[&apos;TXA.12&apos;][&apos;TXA.12.1&apos;] = &apos;CCD_&apos;+uniqueID;

//Create OBX segment
createSegmentAfter(&apos;OBX&apos;, newHl7msg[&apos;TXA&apos;]);
newHl7msg.OBX[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;] = &apos;ED&apos; ;
newHl7msg.OBX[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = uniqueID;
newHl7msg.OBX[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = &apos;Transcription&apos;
newHl7msg.OBX[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;] = encodedStr + &apos;^text^html^&apos;;


//Seialize the HL7 message
var newHl72Xmsg = SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(newHl7msg);

channelMap.put(&apos;newHl72Xmsg&apos;,newHl72Xmsg);
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>f84d088f-6e2a-451a-959c-e9062d66da6b</id>
            <name>decodeBase64EncodedString</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706221980</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Decodes a base64 encoded string and returns a text string

	@param {String} base64EncodedString - the string base64 encoded
	@return {String} Returns a variable named &quot;decodedStringText&quot; that is the decoded base 64 string
*/
function decodeBase64EncodedString(base64EncodedString) {
	decodedStringByteArray = FileUtil.decode(base64EncodedString);
	var decodedStringText = new java.lang.String(decodedStringByteArray);
	channelMap.put(&apos;decodedStringText&apos;,decodedStringText);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>259774a8-b241-494f-9cf4-7ec78aa869d8</id>
            <name>encodeStringToBase64</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223809</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Encodes a string to a base64 encoded string and returns a variable for the base64 encoded string

	@param {String} stringToEncode - the string to base64 encoded
	@return {String} Returns a variable named &quot;base64EncodedString&quot; that is the encoded base 64 string
*/
function encodeStringToBase64(stringToEncode) {
	var base64EncodedString = FileUtil.encode(new java.lang.String(stringToEncode).getBytes()).replaceAll(&apos;\\s&apos;,&apos;&apos;);
	channelMap.put(&apos;base64EncodedString&apos;,base64EncodedString);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>dfcd8e1e-f39f-4e20-8589-8e217901b77d</id>
            <name>finalXfrm_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222385</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

// MUST BE THE LAST FUNCTION CALL AFTER ALL *_NG FUNCTIONS

function finalXfrm_NG(arg1) {
var myMsg = &apos;&apos;+msg.toString();
//Required final step for missing ID sections above, replacing all nullFlavors in CCDA
myMsg = myMsg.replace(/&lt;id nullFlavor=/g, &apos;&lt;id root=&apos;);
myMsg = myMsg.replace(/&lt;code nullFlavor=/g, &apos;&lt;code code=&apos;);
myMsg = myMsg.replace(/nullFlavor=&quot;AXXN8/g, &apos;code=&quot;&apos;);
// MR displays blank entries as long as there is a root or code, so change the UNK ones back to nullFlavor
myMsg = myMsg.replace(/&lt;id root=&quot;UNK&quot;/g, &apos;&lt;id nullFlavor=&quot;UNK&quot;&apos;);
myMsg = myMsg.replace(/&lt;code code=&quot;UNK&quot;/g, &apos;&lt;code nullFlavor=&quot;UNK&quot;&apos;);
myMsg = myMsg.replace(/&lt;id root=&quot;NA&quot;/g, &apos;&lt;id nullFlavor=&quot;NA&quot;&apos;);
myMsg = myMsg.replace(/&lt;code code=&quot;NI&quot;/g, &apos;&lt;code nullFlavor=&quot;NI&quot;&apos;);

//For BVCHC, all lab panels began with text below. Removing to gain space as this text was uneccessary (This is done in Results earlier)
//myMsg = myMsg.replace(/Panel Description: /g, &apos;&apos;);

//For immunizations with a manufacturerOrganization, this piece fixes an issue where these immunizations will not display due to missing id
myMsg = myMsg.replace(/&lt;manufacturerOrganization classCode=&quot;ORG&quot;&gt;/g, &apos;&lt;manufacturerOrganization classCode=&quot;ORG&quot;&gt;&lt;id root=&quot;1&quot; extension=&quot;1&quot;/&gt;&apos;);

//For BVCHC, converting eng to English to match receipt from ADT
myMsg = myMsg.replace(/&lt;languageCode code=&quot;eng&quot;/g, &apos;&lt;languageCode code=&quot;English&quot;&apos;);

//For BVCHC, PCP code was not populating
myMsg = myMsg.replace(/&lt;functionCode nullFlavor=&quot;OTH&quot;/g, &apos;&lt;functionCode code=&quot;PCP&quot;&apos;);

msg = myMsg;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>8d3a394a-7c73-47b7-bdcc-39e13e0e795f</id>
            <name>fnFixMissingSocialHistoryID</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223664</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code> /**
Function to fix the missing ID of the smoking status by adding 
adding a new xml block with a new id and root extension. This lack
of a missing ID prevents ingestion of the content.
@DATE_CREATED 3/04/2016
@AUTHOR MikePinnow
@UPDATES
@DESCRIPTION    Function to fix the missing ID of the smoking status by adding 
                        adding a new xml block with a new id and root extension. This lack
                        of a missing ID prevents ingestion of the content.
@PARAM {XML} observation is an array of XML blocks that have all the observations needed to evaluate to find the tobacco usage OBS
@PARAM {int} len an integer value that is the number of XML blocks in the observation array.
@RETURN {N/A} None
*/
function fnFixMissingSocialHistoryID(observation, len) {
// [DR 4/21/16] Adding line below because I had to add a try/catch statement
default xml namespace = msg.namespace(&apos;&apos;);
// the OID needed to be added to the OBS in order for MR to ingest
// the structured data about tobacco usage
var smokingRootID = &quot;2.16.840.1.113883.10.20.22.4.78&quot;;
var SmokingExtension = new Packages.com.mirth.connect.server.userutil.UUIDGenerator.getUUID() ;
var SmokingRoot = new Packages.com.mirth.connect.server.userutil.UUIDGenerator.getUUID() ;
var smokingNode = new XML(&apos;&lt;id extension=&quot;&apos;+ SmokingExtension + &apos;&quot; root=&quot;&apos; + SmokingRoot + &apos;&quot;/&gt;&apos;);
        // loop through all instances of observations  looking for smoking root ID
        //for (var i = 0 ; i &lt; tmp[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;][&apos;observation&apos;].length(); i++ ){
        for (var i = 0 ; i &lt; observation.length(); i++ ){
                // assign curRootID each iteration for evaluation against the smoking rootID
                // [DR 4/21/16] This fails for PPH - no &apos;templateId&apos; element. Will add a try/catch
                try {
                	curRootID = observation[&apos;templateId&apos;][&apos;@root&apos;][i].toString();
                } catch(err) {
                	curRootID = &apos;&apos;;
                }
                // if current root ID is for smoking then we will add the new smoking ID values to the node.
                if(curRootID == smokingRootID){
                        //appending the smokingID values to the existing node
                        observation[i][&apos;templateId&apos;] += smokingNode;
                }  // end if curRootID
        } // end for
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>f1db0fc1-022d-4db5-bd23-51a9229ff482</id>
            <name>getMRDBConnection_CCD_PVID</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222911</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
// Cloning this for now... not sure how to call a function in a different library. Mirth is erroring out.
function getMRDBConnection_CCD_PVID() {

	//zhi 11/1/13 - changed the connection to use connection pools
	var dbConn = globalMap.get(&apos;mrdbConn&apos;);
	if (dbConn == null || dbConn.getConnection().isClosed()) {
		dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;,&apos;jdbc:postgresql://&apos;+$(&apos;MRES&apos;)+&apos;:5432/mirthresults&apos;,&apos;mirthresults&apos;,&apos;mirthresults&apos;);
		globalMap.put(&quot;mrdbConn&quot;, dbConn);
	}	

    return dbConn;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>5e6f54f0-6c68-487a-8ee3-d9908e8663f7</id>
            <name>hardcodecustodian</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222268</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function hardcodecustodian(ccdastr,custodian) {
//CJ 1/21/2016 This code will remove the Immunization Section from the CCD if the only immunization code is 998
	//default xml namespace = msg.namespace(&apos;&apos;);
	logger.info(&apos;Step 1&apos;)
	default xml namespace = msg.namespace(&apos;&apos;);
	//logger.info(msg)
	logger.info(&apos;Step 2&apos;)
	logger.info(msg[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;][&apos;name&apos;]);
	logger.info(&apos;Step 3&apos;)
	msg[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;][&apos;name&apos;] = custodian;
	logger.info(&apos;Step 4&apos;)             
	//logger.info(&apos;number of components = &apos; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][0])
	//iterate through each component section
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>9cbf12c4-fe63-404d-9c74-020838f181eb</id>
            <name>HL7_Encode_CDA</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223933</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 01/13/2016 - This function encodes a CDA for HL7 V2 processing in a OBX segment

	@param {String} msg - the CDA in it&apos;s raw form
	@return {String} return description
*/
function HL7_Encode_CDA(ccdastr) {
	var CDAWEncoding = ccdastr.toString();
	//Remove all \r\n (carriage return line feed combinations) as these would make the message appear to have extra segments
	var CDAWEncodingCRLF = CDAWEncoding.replaceAll(&apos;[\r\n]&apos;, &apos;&apos;);
	//Replace | (pipe) with \F\ per HL7 encoding
	var CDAWEncodingPipe = CDAWEncodingCRLF.replaceAll(&apos;\\|&apos;, &apos;\\\\F\\\\&apos;);
	//Replace ^ (carat) with \S\ per HL7 encoding
	var CDAWEncodingCarat = CDAWEncodingPipe.replaceAll(&apos;\\^&apos;, &apos;\\\\S\\\\&apos;);
	//Replace &amp; (ampersand) with \T\ per HL7 encoding
	var CDAWEncodingAmpersand = CDAWEncodingCarat.replaceAll(&apos;&amp;&apos;, &apos;\\\\T\\\\&apos;);
	//Replace ~ (tilde) with \R\ per HL7 encoding
	var CDAWEncodingTilde = CDAWEncodingAmpersand.replaceAll(&apos;~&apos;, &apos;\\\\R\\\\&apos;);
	//Replace \n (line feed) with .br per HL7 encoding
	var CDAWEncodingLineFeed = CDAWEncodingTilde.replaceAll(&apos;[\n]&apos;, &apos;.br&apos;);
	//Replace ’ (Right Single Quotation Mark) with &apos; (apostrophe
	var CDAWEncodingSingleQuote = CDAWEncodingLineFeed.replaceAll(&apos;&#x92;&apos;, &apos;\&apos;&apos;);
	ccdastr = CDAWEncodingSingleQuote;
	return ccdastr;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>4f02c80f-4f51-4985-b9dd-268da853f8d3</id>
            <name>HL7_Unencode_CDA</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222954</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 07/06/2016 - This function changes the encoding done to allow a CDA for HL7 V2 processing in a OBX segment

	@param {String} msg - the CDA in it&apos;s raw form
	@return {String} return description
*/
function HL7_Unencode_CDA(ccdastr) {
	var CDAWEncoding = ccdastr.toString();
	//Replace | (pipe) with \F\ per HL7 encoding
	var CDAWEncodingPipe = CDAWEncoding.replaceAll(&apos;\\\\F\\\\&apos;, &apos;\\|&apos;);
	//Replace ^ (carat) with \S\ per HL7 encoding
	var CDAWEncodingCarat = CDAWEncodingPipe.replaceAll(&apos;\\\\S\\\\&apos;, &apos;\\^&apos;);
	//Replace &amp; (ampersand) with \T\ per HL7 encoding
	var CDAWEncodingAmpersand = CDAWEncodingCarat.replaceAll(&apos;\\\\T\\\\&apos;, &apos;&amp;&apos;);
	//Replace ~ (tilde) with \R\ per HL7 encoding
	var CDAWEncodingTilde = CDAWEncodingAmpersand.replaceAll(&apos;\\\\R\\\\&apos;, &apos;~&apos;);
	//Replace \n (line feed) with .br per HL7 encoding
//	var CDAWEncodingLineFeed = CDAWEncodingTilde.replaceAll(&apos;.br&apos;, &apos;\n&apos;);
	//Replace ’ (Right Single Quotation Mark) with &apos; (apostrophe)
	ccdastr = CDAWEncodingTilde;
	return ccdastr;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>6bd80ef2-2f58-4086-a7be-b1121466737d</id>
            <name>moveTranslationCodeIfMedicationCodeIsUnknown</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222464</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 2/24/2016 This function will change the code, codeSystem, codeSystemname and displayName to the translation element values from the CCD if the medication code is Unknown

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function moveTranslationCodeIfMedicationCodeIsUnknown(arg1) {
//CJ 1/21/2016 This code will remove the Medications History Section from the CCD if the medication code is None
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 10160-0 which means the section is for Medication History
		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;10160-0&apos;) {
//iterate through each entry of the Medications section
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			for (var j=0;j&lt;entryLen;j++) {
//iterate through each manufacturedProduct of the entry
				var manufacturedProductLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;].length();
				for (var k=0;k&lt;manufacturedProductLen;k++) {
//iterate through each code of the manufacturedMaterial
					var manufacturedMaterialLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;].length();
					for (var l=0;l&lt;manufacturedMaterialLen;l++) {
						var manufacturedMaterialCodeLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;].length();
						for (var m=0;m&lt;manufacturedMaterialCodeLen;m++) {
//Find the code of the manufacturedMaterial and if it equals None then
							var manufacturedMaterialCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;].toString();
							if (manufacturedMaterialCode == &apos;Unknown&apos;) {
//change the code, codeSystem, codeSystemname and displayName to the translation element values 
								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;] = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;translation&apos;][&apos;@code&apos;];
								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@codeSystem&apos;] = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;translation&apos;][&apos;@codeSystem&apos;];
								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@codeSystemName&apos;] = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;translation&apos;][&apos;@codeSystemName&apos;];
								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@displayName&apos;] = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;translation&apos;][&apos;@displayName&apos;];
							}
							break;
						}
					}
				}
			}
			break;
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>072a607b-0026-4a07-910c-2d1fb5aed254</id>
            <name>RemoveEncFromProc</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223304</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function RemoveEncFromProc(ccdastr) {
//CJ 1/21/2016 This code will remove the Immunization Section from the CCD if the only immunization code is 998
	//default xml namespace = msg.namespace(&apos;&apos;);
	default xml namespace = msg.namespace(&apos;&apos;);
	//logger.info(msg)
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
	              
	//logger.info(&apos;number of components = &apos; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][0])
	//iterate through each component section
	
	for (var i=0;i&lt;compLen;i++) 
	{

		var TranslationCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;code&apos;][&apos;translation&apos;][&apos;@code&apos;].toString();
		
		if (TranslationCode == &quot;99201&quot; ||
		    TranslationCode == &quot;99202&quot; ||
		    TranslationCode == &quot;99203&quot; ||
		    TranslationCode == &quot;99204&quot; ||
		    TranslationCode == &quot;99205&quot; ||
		    TranslationCode == &quot;99211&quot; || 
		    TranslationCode == &quot;99212&quot; ||
		    TranslationCode == &quot;99213&quot; ||
		    TranslationCode == &quot;99214&quot; ||
		    TranslationCode == &quot;99215&quot; ||
		    TranslationCode == &quot;99243&quot;) 
		{
			
			delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
			
			break;
		}
	
     }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>de10dcaa-b27e-4f37-ad15-587db35addab</id>
            <name>removeImunizationSectionIfImmunizationCodeIs998</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223347</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will remove the Immunization Section from the CCD if the only immunization code is 998

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function removeImunizationSectionIfImmunizationCodeIs998(arg1) {
//CJ 1/21/2016 This code will remove the Immunization Section from the CCD if the only immunization code is 998
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 11369-6 which means the section is for Immunizations
		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;11369-6&apos;) {
//iterate through each entry of the Immunizations section
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			for (var j=0;j&lt;entryLen;j++) {
//iterate through each manufacturedProduct of the entry
				var manufacturedProductLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;].length();
				for (var k=0;k&lt;manufacturedProductLen;k++) {
//iterate through each code of the manufacturedMaterial
					var manufacturedMaterialLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;].length();
					for (var l=0;l&lt;manufacturedMaterialLen;l++) {
						var manufacturedMaterialCodeLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;].length();
						for (var m=0;m&lt;manufacturedMaterialCodeLen;m++) {
//Find the code of the manufacturedMaterial and if it equals 998 then
							var manufacturedMaterialCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;].toString();
							if (manufacturedMaterialCode == &apos;998&apos;) {
//delete the Immunization section
								delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
								break;
							}
							break;
						}
						break;
					}
					break;
				}
				break;
			}
			break;
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>380e6d4d-5b7b-479e-af97-96243fb13e34</id>
            <name>removeInsuranceSection</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223207</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will remove the Insurance Section from the CCD

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function removeInsuranceSection(ccdastr) {
//CJ 1/21/2016 This code will remove the Insurance Section from the CCD
default xml namespace = msg.namespace(&apos;&apos;);
	var testvar = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].toString();
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();

//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 48768-6 which means the section is for Payment Sources

		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;48768-6&apos;) {
//delete the Payment Sources section
			delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
			break;
		}
	}
	//logger.info(&quot;RIS testvar: &quot; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].toString());
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>4a6ba608-5f83-43dc-a755-3f83435b0a40</id>
            <name>removeMedicationAdministeredSectionIfMedicationCodeIsNone</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222122</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will remove the Medications Administered Section from the CCD if the medication code is None

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function removeMedicationAdministeredSectionIfMedicationCodeIsNone(arg1) {
//CJ 1/21/2016 This code will remove the Medications Administered Section from the CCD if the medication code is None
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 29549-3 which means the section is for Medications Administered
		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;29549-3&apos;) {
//iterate through each entry of the Medications Administered section
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			for (var j=0;j&lt;entryLen;j++) {
//iterate through each manufacturedProduct of the entry
				var manufacturedProductLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;].length();
				for (var k=0;k&lt;manufacturedProductLen;k++) {
//iterate through each code of the manufacturedMaterial
					var manufacturedMaterialLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;].length();
					for (var l=0;l&lt;manufacturedMaterialLen;l++) {
						var manufacturedMaterialCodeLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;].length();
						for (var m=0;m&lt;manufacturedMaterialCodeLen;m++) {
//Find the code of the manufacturedMaterial and if it equals None then
							var manufacturedMaterialCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;].toString();
							if (manufacturedMaterialCode == &apos;None&apos;) {
//delete the Medications section
								delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
							}
							break;
						}
					}
				}
			}
			break;
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>af33540d-e51a-4b13-9168-56572cf36799</id>
            <name>removeMedicationHistorySectionIfMedicationCodeIsNone</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223854</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will remove the Medications History Section from the CCD if the medication code is None

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function removeMedicationHistorySectionIfMedicationCodeIsNone(arg1) {
//CJ 1/21/2016 This code will remove the Medications History Section from the CCD if the medication code is None
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 10160-0 which means the section is for Medication History
		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;10160-0&apos;) {
//iterate through each entry of the Medications section
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			for (var j=0;j&lt;entryLen;j++) {
//iterate through each manufacturedProduct of the entry
				var manufacturedProductLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;].length();
				for (var k=0;k&lt;manufacturedProductLen;k++) {
//iterate through each code of the manufacturedMaterial
					var manufacturedMaterialLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;].length();
					for (var l=0;l&lt;manufacturedMaterialLen;l++) {
						var manufacturedMaterialCodeLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;].length();
						for (var m=0;m&lt;manufacturedMaterialCodeLen;m++) {
//Find the code of the manufacturedMaterial and if it equals None then
							var manufacturedMaterialCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][k][&apos;manufacturedMaterial&apos;][l][&apos;code&apos;][&apos;@code&apos;].toString();
							if (manufacturedMaterialCode == &apos;None&apos;) {
//delete the Medications section
								delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
							}
						}
					}
				}
			}
			break;
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>9ecf4c99-4829-4ebe-9858-cce4a00f0469</id>
            <name>removeNotesCommentsInImmunizationSection</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706221585</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will remove extraneous information in the Notes/Comments section of Immunizations

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function removeNotesCommentsInImmunizationSection(arg1) {
//CJ 1/21/2016 This code will remove extraneous information in the Notes/Comments section of Immunizations
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 11369-6 which means the section is for Immunization
		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;11369-6&apos;) {
//iterate through each entry of the Immunizations section
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			for (var j=0;j&lt;entryLen;j++) {
//iterate through each entryRelationship of the entry
				var entryRelationshipLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;entryRelationship&apos;].length();
				for (var k=0;k&lt;entryRelationshipLen;k++) {
//iterate through each Act of the entryRelationship
					var entryRelationshipActLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;entryRelationship&apos;][k][&apos;act&apos;].length();
					for (var l=0;l&lt;entryRelationshipActLen;l++) {
//iterate through each code of the entryRelationship
						var codeLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;entryRelationship&apos;][k][&apos;act&apos;][l][&apos;code&apos;][&apos;@code&apos;].length();
						for (var m=0;m&lt;codeLen;m++) {
							var actCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;entryRelationship&apos;][k][&apos;act&apos;][l][&apos;code&apos;][&apos;@code&apos;].toString();
							var actCodeDisplayName = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;entryRelationship&apos;][k][&apos;act&apos;][l][&apos;code&apos;][&apos;@displayName&apos;].toString();
							if (actCode == &apos;48767-8&apos; &amp;&amp; actCodeDisplayName == &apos;Immunization Registry comment&apos;) {
								delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;entryRelationship&apos;][k];
							}
						}
					}
				}
			}
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>05034c41-e21b-4c4b-b65c-4d9765aa52c8</id>
            <name>removeParagraphTagInResultsSection</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223125</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will remove extra paragraph tags that are found in the narrative block of lab Results

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function removeParagraphTagInResultsSection(arg1) {
//CJ 1/21/2016 This code will remove extra paragraph tags that are found in the narrative block of lab Results
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 30954-2 which means the section is for Results
	var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		if (compCode === &apos;30954-2&apos;) {
//iterate through each table of the Results section
			var tableLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;].length();
			for (var j=0;j&lt;tableLen;j++) {
//iterate through each tr of the table
				var trLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][j][&apos;tbody&apos;][&apos;tr&apos;].length();
				for (var k=0;k&lt;trLen;k++) {
//iterate through each td of the tr
					var tdLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][j][&apos;tbody&apos;][&apos;tr&apos;][k][&apos;td&apos;].length();
					for (var l=0;l&lt;tdLen;l++) {
//iterate through each paragraph of the td
						var paragraphLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][j][&apos;tbody&apos;][&apos;tr&apos;][k][&apos;td&apos;][l][&apos;paragraph&apos;].length();
						for (var m=0;m&lt;paragraphLen;m++) {
//change the td to not have the paragraph tag by replacing the td with the value in the paragraph
							var tdParagraph = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][j][&apos;tbody&apos;][&apos;tr&apos;][k][&apos;td&apos;][l][&apos;paragraph&apos;].toString();
							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][j][&apos;tbody&apos;][&apos;tr&apos;][k][&apos;td&apos;][l] = tdParagraph
						}
					}
				}
			}
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>c1d35874-e54c-4ef2-8692-92b998e9afa4</id>
            <name>removeUnknownAllergiesInAllergiesSection</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223005</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will remove Unknown Allergies from Machine Readable portion of CCD

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function removeUnknownAllergiesInAllergiesSection(arg1) {
//CJ 1/21/2016 This code will remove Unknown Allergies from Machine Readable portion of CCD
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
	for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 48765-2 which means the section is for Allergies
		var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
		if (compCode === &apos;48765-2&apos;) {
//iterate through each entry of the Allergies section
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			for (var j=0;j&lt;entryLen;j++) {
//iterate through each entryRelationship of the entry
				var entryRelationshipLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;act&apos;][&apos;entryRelationship&apos;].length();
				for (var k=0;k&lt;entryRelationshipLen;k++) {
//iterate through each observation of the entryRelationship
					var observationLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;act&apos;][&apos;entryRelationship&apos;][k][&apos;observation&apos;][&apos;@negationInd&apos;].length();
					for (var l=0;l&lt;observationLen;l++) {
						var negationInd = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;act&apos;][&apos;entryRelationship&apos;][k][&apos;observation&apos;][&apos;@negationInd&apos;].toString();
						if (negationInd == &apos;true&apos;) {
							delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j];
						}
					}
				}
			}
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>5c6deb49-4507-4be3-a2bf-acdb035296d1</id>
            <name>RemoveUnwantedProblems</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222685</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function RemoveUnwantedProblems(ccdastr) 
{

	//default xml namespace = msg.namespace(&apos;&apos;);
	default xml namespace = msg.namespace(&apos;&apos;);
	//logger.info(msg)
	var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
	              

	//iterate through each component section
	
	for (var i=0;i&lt;compLen;i++) 
	{
		var sectiontitile = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;]
		
		if(sectiontitile == &apos;Problems&apos;)
		{
			//Delete the unwanted from problems table section
			var trlen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
			//logger.info(trlen)
			for (var t=0;t&lt;trlen;t++) 
			{
				//var tdlen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;].length();
				//for (var d=0;d&lt;tdlen;d++) 
				//{
					//logger.info(t)
					//logger.info(msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][0][&apos;content&apos;])
					if (msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][0][&apos;content&apos;] == &apos;CODING COMPLETE&apos;)
					{
						delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t];
						trlen -- ;
						//logger.info(&apos;deleted from problem1&apos;)
					}
					
				//}
	
			}
			
			//Delete the unwanted from problems so that they will nit load in CHIE
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			//logger.info(entryLen)
			
			for (var e=0;e&lt;entryLen;e++) 
			{
			     //logger.info(&apos;deleted from problem2 started _ &apos; + e)
				var displayName = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;value&apos;][&apos;translation&apos;][&apos;@displayName&apos;]
				
				if(displayName == &apos;CODING COMPLETE&apos;)
				{
					delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e]
					//logger.info(&apos;deleted from problem2&apos;)
					entryLen --;
					
				}
			}
		
		}
     	if(sectiontitile == &apos;Encounters&apos;)
		{
			//Delete the unwanted from encounters table section
			var trlen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
			//logger.info(trlen)
			for (var t=0;t&lt;trlen;t++) 
			{
				var tdlen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;].length();
				for (var d=0;d&lt;tdlen;d++) 
				{
					var listlen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][d][&apos;list&apos;][&apos;item&apos;].length();
					for (var l=0;l&lt;listlen;l++)
					{
						var itemval = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][d][&apos;list&apos;][&apos;item&apos;][l];
						if (itemval == &apos;CODING COMPLETE&apos;)
						{
						   delete (msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][d][&apos;list&apos;][&apos;item&apos;][l]);
						   //logger.info(&apos;deleted from enc1&apos;)
						   listlen--;
						   
						}
					}
					
				}
	
			}
			
			//Delete the unwanted from encounters/problems so that they will nit load in CHIE
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			//logger.info(entryLen)
			
			for (var e=0;e&lt;entryLen;e++) 
			{
				var erlen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;encounter&apos;][&apos;entryRelationship&apos;].length();
				for (var er=0;er&lt;erlen;er++) 
			      {
			      	//logger.info(&apos;deleted from enc2 started _ &apos; + er)
					var displayName  = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;encounter&apos;][&apos;entryRelationship&apos;][er][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;value&apos;][&apos;translation&apos;][&apos;@displayName&apos;]
					if (displayName == &apos;CODING COMPLETE&apos;)
					{
						delete (msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;encounter&apos;][&apos;entryRelationship&apos;][er]);
						erlen--;
						//logger.info(&apos;deleted from enc2&apos;)
						
					}
					
				  }
		
			}
		
		}
		if(sectiontitile == &apos;Procedures&apos;)
		{
			var trlen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
			//logger.info(trlen)
			for (var t=0;t&lt;trlen;t++) 
			{
				if (msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][0][&apos;content&apos;] == &apos;CODING COMPLETE&apos;)
					{
						delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t];
						trlen -- ;
						//logger.info(&apos;deleted from procedure&apos;)
					}

			}
			
			//Delete the unwanted from problems so that they will nit load in CHIE
			var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			//logger.info(entryLen)
			
			for (var e=0;e&lt;entryLen;e++) 
			{
			     //logger.info(&apos;deleted from problem2 started _ &apos; + e)
				var displayName = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;procedure&apos;][&apos;code&apos;][&apos;translation&apos;][&apos;@displayName&apos;];
				
				if(displayName == &apos;CODING COMPLETE&apos;)
				{
					delete (msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e]);
					//logger.info(&apos;deleted from problem2&apos;)
					entryLen --;
					
				}
				else
				{
				
					var TranslationCode = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;procedure&apos;][&apos;code&apos;][&apos;translation&apos;][&apos;@code&apos;];
					if(TranslationCode == &quot;99201&quot; ||
					TranslationCode == &quot;99202&quot; ||
					TranslationCode == &quot;99203&quot; ||
					TranslationCode == &quot;99204&quot; ||
					TranslationCode == &quot;99205&quot; ||
					TranslationCode == &quot;99211&quot; || 
					TranslationCode == &quot;99212&quot; ||
					TranslationCode == &quot;99213&quot; ||
					TranslationCode == &quot;99214&quot; ||
					TranslationCode == &quot;99215&quot; ||
					TranslationCode == &quot;99243&quot;)
					{
						delete (msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e]);
						//logger.info(&apos;deleted from translation&apos;)
						entryLen --;
						
					}
				}
			}
		
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>a10404fa-2837-4ba8-9e72-d2f1e6f3e932</id>
            <name>setVisitNumberToFirstEncounterId</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706221644</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Sets the visit number in PV1.19 of the HL7 message to be the ID for the first encounter in the CDA
	This is done to stop creating a duplicate encounter on the day that the CDA was generated

	@param {String} arg1 - the raw CDA to be processed
	@return {String} returns a variable called visitNumber which can be used in PV1.19
*/
function setVisitNumberToFirstEncounterId(arg1) {
// ENCOUNTERS ***********************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}	
 	if ((compTitle == &apos;46240-8&apos;) || compTitle.toUpperCase().search(&quot;ENCOUNTERS&quot;) != -1) {
 		//create a variable called visitNumber that is set as the ID for the first encounter
		try {
			var visitNumber = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][0][&apos;encounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
			channelMap.put(&apos;visitNumber&apos;,visitNumber)
		} catch(err) {
			var sectEntryCount = 0;
		}
 	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>e4845c20-05a5-4105-a95b-573533020799</id>
            <name>substituteMRpvID</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223535</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function substituteMRpvID(dataSource) {
default xml namespace = msg.namespace(&apos;&apos;);	
// Substitute the MirthResultsID for the provider UUID so Mirth won&apos;t create a new Provider if first and last already in MR for this facility
if (dataSource.length &gt; 0) {
	var dbConn = getMRDBConnection_CCD_PVID();
	var numProv = msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;].length();
	for (var i=0;i&lt;numProv;i++) {
		try {
			var pLast = &apos;&apos;+msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][i][&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString();
		} catch(err) {
			var pLast = &apos;&apos;;
		}
		try {	
			var pFirst = &apos;&apos;+msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][i][&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString();
		} catch(err) {
			var pFirst = &apos;&apos;;
		}
		if (pLast.length &gt; 0 &amp;&amp; pFirst.length &gt; 0) {
			var getMRID = &quot;select DISTINCT pa.alias from provider p, name n, provider_alias pa, facility f &quot;;
			getMRID += &quot;where p.name_key = n.name_key and upper(n.last) = &apos;&quot;+pLast.toUpperCase()+&quot;&apos; and upper(n.first) = &apos;&quot;+pFirst.toUpperCase()+&quot;&apos; and &quot;;
			getMRID += &quot;p.provider_key = pa.provider_key and pa.facility_key = f.facility_key and f.short_label = &apos;&quot;+dataSource+&quot;&apos;&quot;;
			var result = dbConn.executeCachedQuery(getMRID);
			var pvID = &apos;&apos;;
			while (result.next()) {
				pvID = &apos;&apos;+result.getString(&apos;alias&apos;);
			}
			if (pvID.length != 0) {
				msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][i][&apos;assignedEntity&apos;][&apos;id&apos;][&apos;@extension&apos;] = pvID;
			}
		}
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>d415737b-1446-400f-ac45-433ef91a719c</id>
            <name>updateAdvDir_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223625</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateAdvDir_NG(arg1) {
// ADVANCE DIRECTIVE **************************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;42348-3&apos;) || compTitle.toUpperCase().search(&apos;ADVANCE DIRECTIVE&apos;) != -1) {
		// XML: Remove the component
		delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
		break;
	}
}

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>b7e559d4-5512-4238-8440-d1dac75ed66f</id>
            <name>updateAllergies_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706224027</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateAllergies_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
// ALLERGIES
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;48765-2&apos;) || compTitle.toUpperCase().search(&apos;ALLERGIES&apos;) != -1) {
		// Remove any blank entries
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
	
			if (textVal.toUpperCase().search(&apos;NO ALLERGIES&apos;) != -1) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>d6f9bf4f-071d-475c-bcd1-b1e990b81ea1</id>
            <name>updateAllergies_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222816</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateAllergies_NG(arg1) {
// ALLERGIES ********************************************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;48765-2&apos;) || compTitle.toUpperCase().search(&apos;ALLERGIES&apos;) != -1) {
		// XML: Remove the component if there is only 1 Unknown entry
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;playingEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}
	
			if (codeVal == &apos;160244002&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>bc997056-8a56-45e7-a363-56781a145881</id>
            <name>updateAssertionsInSocialHistorySection</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222549</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will update assertions in Social History section of CCD

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function updateAssertionsInSocialHistorySection(arg1) {
//CJ 1/21/2016 This code will update assertions in Social History section of CCD
var compLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//iterate through each component section
for (var i=0;i&lt;compLen;i++) {
//find the section with a code of 29762-2 which means the section is for Social History
var compCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	if (compCode === &apos;29762-2&apos;) {
//iterate through each entry of the Social History section
	var entryLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		for (var j=0;j&lt;entryLen;j++) {
//iterate through each value of the entry
			var valueCodeLen = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].length();
			for (var k=0;k&lt;valueCodeLen;k++) {
				var valueCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
				switch(valueCode) {
//if the value code matches one of standard value sets then then update the Observation Code information and Observation Value displayName appropriately
//Tobacco use and exposure 
					case &apos;266927001&apos;:
					case &apos;449868002&apos;:
					case &apos;428041000124106&apos;:
					case &apos;8517006&apos;:
					case &apos;266919005&apos;:
					case &apos;77176002&apos;:
					case &apos;428071000124103&apos;:
					case &apos;428061000124105&apos;:
					case &apos;110483000&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;229819007&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Tobacco use and exposure&apos;;
						if (valueCode === &apos;266927001&apos;) {
							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Unknown if ever smoked&quot;
						}
						if (valueCode === &apos;449868002&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Current every day smoker&quot;						
						}
						if (valueCode === &apos;110483000&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Tobacco user&quot;
						}
						if (valueCode === &apos;428041000124106&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Current some day smoker&quot;
						}
						if (valueCode === &apos;8517006&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Former smoker&quot;
						}
						if (valueCode === &apos;266919005&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Never smoker (Never Smoked)&quot;
						}
						if (valueCode === &apos;77176002&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Smoker, current status unknown&quot;
						}
						if (valueCode === &apos;428071000124103&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Heavy tobacco smoker&quot;
						}
						if (valueCode === &apos;428061000124105&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Light tobacco smoker&quot;
						}
					break;
//Housing History
					case &apos;365508006&apos;:
					case &apos;32911000&apos;:
					case &apos;105529008&apos;:
					case &apos;105531004&apos;:
					case &apos;309682003&apos;:
					case &apos;105531004&apos;:
					case &apos;267129008&apos;:
					case &apos;310207003&apos;:
					case &apos;224133007&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;442133001&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Housing History&apos;;
						if (valueCode === &apos;365508006&apos;) {
							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Finding of residence and accommodation circumstances&quot;
						}
						if (valueCode === &apos;32911000&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Homeless&quot;						
						}
						if (valueCode === &apos;105529008&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Lives alone&quot;
						}
						if (valueCode === &apos;105531004&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Housing unsatisfactory&quot;
						}
						if (valueCode === &apos;309682003&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Poor housing&quot;
						}
						if (valueCode === &apos;105531004&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Housing unsatisfactory&quot;
						}
						if (valueCode === &apos;267129008&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Inadequate housing&quot;
						}
						if (valueCode === &apos;310207003&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Sheltered housing&quot;
						}
						if (valueCode === &apos;224133007&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Lives with family&quot;
						}
					break;
//Exercise
					case &apos;61686008&apos;:
					case &apos;225925001&apos;:
					case &apos;225924002&apos;:
					case &apos;228448000&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;256235009&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Exercise&apos;;
						if (valueCode === &apos;61686008&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Physical exercise&quot;
						}
						if (valueCode === &apos;225925001&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Regular exercise&quot;
						}
						if (valueCode === &apos;225924002&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Sustained exercise&quot;
						}
						if (valueCode === &apos;228448000&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Exercises regularly&quot;
						}
					break;
//Alcohol intake
					case &apos;219006&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;160573003&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Alcohol intake&apos;;
						if (valueCode === &apos;219006&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Current drinker of alcohol&quot;
						}
					break;
//Nutritional observable
					case &apos;&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;364393001&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Nutritional observable&apos;;
					break;
//Employment detail
					case &apos;&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;364703007&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Employment detail&apos;;
					break;
//Toxic exposure status
					case &apos;&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;425400000&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Toxic exposure status&apos;;
					break;
//Details of drug misuse behavior
					case &apos;361055000&apos;:
					case &apos;228366006&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;363908000&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Details of drug misuse behavior&apos;;
						if (valueCode === &apos;361055000&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Misuses drugs&quot;
						}
						if (valueCode === &apos;228366006&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Finding relating to drug misuse behavior&quot;
						}
					break;
//Health-related behavior
					case &apos;&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;228272008&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Health-related behavior&apos;;
					break;
//Educational Achievement
					case &apos;365461001&apos;:
					case &apos;365458002&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;105421008&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Educational Achievement&apos;;
						if (valueCode === &apos;365461001&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Finding of educational achievement&quot;
						}
						if (valueCode === &apos;365458002&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Education and/or schooling finding&quot;
						}
					break;
//Social and personal history finding
					case &apos;271437004&apos;:
					case &apos;365448001&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;365448001&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Social and personal history finding&apos;;
						if (valueCode === &apos;271437004&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Problem situation relating to social and personal history&quot;
						}
						if (valueCode === &apos;365448001&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Social and personal history finding&quot;
						}
					break;
//Intravenous drug user
					case &apos;228388006&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;228388006&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Intravenous drug user&apos;;
						if (valueCode === &apos;228388006&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Intravenous drug user&quot;
						}
					break;
//Sexually active
					case &apos;228453005&apos;:
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = &apos;228453005&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;2.16.840.1.113883.6.96&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;SNOMED CT&apos;;
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = &apos;Sexually active&apos;;
						if (valueCode === &apos;228453005&apos;) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;] = &quot;Sexually active&quot;
						}
					break;
				}
			}
		}
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>7a74f48a-52d3-4088-9746-16909cbaa5c6</id>
            <name>updateDocs_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223733</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateDocs_NG(dataSource) {
// Change the Title
default xml namespace = msg.namespace(&apos;&apos;);
var custName = &apos;&apos;+msg[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;][&apos;name&apos;].toString();
if (custName.length &gt; 0) {
	msg[&apos;title&apos;] = &apos;Continuity of Care Document - &apos;+custName;
}
// Remove any duplicate secondary providers and providers with no last name
var done = false;
var paranoiaCount = 0;
while (!done) {
	paranoiaCount++;
	var numProv = msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;].length();
	for (var i=0;i&lt;numProv;i++) {
		try {
			var pLast = &apos;&apos;+msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][i][&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString();
		} catch(err) {
			var pLast = &apos;&apos;;
		}
		try {
			var pFirst = &apos;&apos;+msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][i][&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString();
		} catch(err) {
			var pFirst = &apos;&apos;;
		}	
		pFirst = pFirst.toUpperCase();
		pLast = pLast.toUpperCase();		
		var segDeleted = false;
		if (pLast.length == 0) {
			segDeleted = true;
			delete msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][i];
			break;			
		} else {
			for (var j=0;j&lt;numProv;j++) {
				if (j == i) {continue;}
				try {
					var npLast = &apos;&apos;+msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][j][&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString();
				} catch(err) {
					var npLast = &apos;&apos;;
				}
				try {
					var npFirst = &apos;&apos;+msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][j][&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString();
				} catch(err) {
					var npFirst = &apos;&apos;;
				}			
				try {
					var isPCP = &apos;&apos;+msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][j][&apos;functionCode&apos;][&apos;@code&apos;].toString();
				} catch(err) {
					var isPCP = &apos;&apos;;
				}			
				if (npFirst.toUpperCase() == pFirst &amp;&amp; npLast.toUpperCase() == pLast &amp;&amp; isPCP.toUpperCase() != &apos;PCP&apos; &amp;&amp; isPCP.toUpperCase() != &apos;PP&apos;) {
					segDeleted = true;
					delete msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][j];
					break;
				}
			}
		}
	}
	if (numProv &lt; 2) {
		done = true;
	}
	if (!segDeleted) {
		done = true;
	}
	if (paranoiaCount &gt; 100) {
		done = true;
	}	
}	
substituteMRpvID(dataSource);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>d2bfc689-12a2-4e0c-988d-d420649ea744</id>
            <name>updateEncounters_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222774</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateEncounters_NG(arg1) {
// ENCOUNTERS ***********************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}	
 	if ((compTitle == &apos;46240-8&apos;) || compTitle.toUpperCase().search(&quot;ENCOUNTERS&quot;) != -1) {
 		//change to convert all encounter types from Unknown to Outpatient
		try {
			var sectEntryCount = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var sectEntryCount = 0;
		}
		for (var j=0;j&lt;sectEntryCount;j++)  {                                         
			try {
				var isNull = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;encounter&apos;][&apos;code&apos;][&apos;@nullFlavor&apos;].toString();
				if (isNull == &apos;UNK&apos;) {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;encounter&apos;][&apos;code&apos;][&apos;@nullFlavor&apos;] = &apos;O&apos;;
				}
			} catch(err) {
				var isNull = &apos;&apos;;
			}
		}          		
 	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>b7484cca-5ac7-4c6a-8cca-d291f092c6aa</id>
            <name>updateFamilyHistory_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222301</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateFamilyHistory_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);

// FAMILY HISTORY
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;10157-6&apos;) || compTitle.toUpperCase() == &apos;FAMILY HISTORY&apos;) {
		// Remove any entries that have no code or text and add &quot;Unspecified&quot; if there is a code or text, but the family member is blank
		// MR won&apos;t display entry if there is no family member attached to it
		var done = false;
		var paranoiaCount = 0;
		while (!done) {
			paranoiaCount ++;
			try {
				var numRows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
			} catch(err) {
				var numRows = 0;
			}
			var foundEmptyLine = false;
			for (var j=0;j&lt;numRows;j++) {
				try {
					var famMember = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0].toString();
				} catch(err) {
					var famMember = &apos;&apos;;
				}
				try {
					var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1].toString();
				} catch(err) {
					var codeVal = &apos;&apos;;
				}
				try {
					var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][2].toString();
				} catch(err) {
					var textVal = &apos;&apos;;
				}
				if (codeVal.length == 0 &amp;&amp; textVal.length == 0) {
					delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j];
					foundEmptyLine = true;
					break;							
				}
				if (famMember.length == 0) {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0] = &apos;Unspecified&apos;;
				}
			}
			if (foundEmptyLine) {
				done = false;
			} else if (j &gt;= numRows) {
				done = true;
			}
			if (paranoiaCount &gt; 100) {
				done = true;
			}
		}
		// Remove any blank entries from the XML so they don&apos;t show up in MR
		var done = false;
		var paranoiaCount = 0;
		while (!done) {
			paranoiaCount ++;
			try {
				var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			} catch(err) {
				var numEntries = 0;
			}
			var foundEmptyLine = false;
			for (var j=0;j&lt;numEntries;j++) {
				try {
					var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;value&apos;][&apos;@nullFlavor&apos;].toString();
				} catch(err) {
					var codeVal = &apos;&apos;;
				}
				if (codeVal.toUpperCase() == &apos;NI&apos;) {
					delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j];
					foundEmptyLine = true;
					break;							
				} else {
					try {
						var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;value&apos;][&apos;translation&apos;][&apos;@displayName&apos;].toString();
					} catch(err) {
						var textVal = &apos;&apos;;
					}
					if (textVal == &apos;UNK&apos;) {
						delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j];
						foundEmptyLine = true;
						break;	
					}
				}
			}
			if (foundEmptyLine) {
				done = false;
			} else if (j &gt;= numEntries) {
				done = true;
			}
			if (paranoiaCount &gt; 100) {
				done = true;
			}
		}
		// Overwrite the code with the text of the condition; otherwise they are all &quot;Problem&quot;
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		for (var j=0;j&lt;numEntries;j++) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;value&apos;][&apos;translation&apos;][&apos;@displayName&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
			if (textVal.length &gt; 0) {
				try {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = textVal;
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = textVal;					
				} catch(err) {
					//skip it
				}
			}
		}		
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>d2158b76-8e6b-412d-a810-cd27a644ce1f</id>
            <name>updateFamilyHistory_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222163</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateFamilyHistory_NG(arg1) {
// FAMILY HISTORY ***********************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}	
 	if ((compTitle == &apos;10157-6&apos;) || compTitle.toUpperCase().search(&quot;FAMILY HISTORY&quot;) != -1) {
 		// HTML: Remove the row if there is nothing in the Diagnosis column	
		var done = false;
		var paranoiaCount = 0;
		while (!done) {
			paranoiaCount ++;
			try {
				var numRows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
			} catch(err) {
				var numRows = 0;
			}
			var foundEmptyLine = false;
			for (var j=0;j&lt;numRows;j++) {
				try {
					var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1][&apos;content&apos;].toString();
				} catch(err) {
					var textVal = &apos;&apos;;
				}
				if (textVal.length == 0) {
					delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j];
					foundEmptyLine = true;
					break;							
				}
			}
			if (foundEmptyLine) {
				done = false;
			} else if (j &gt;= numRows) {
				done = true;
			}
			if (paranoiaCount &gt; 100) {
				done = true;
			}
		} 			
		// HTML: Remove the header Status column, per NextGen.	 
 		try {
 			delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;thead&apos;][&apos;tr&apos;][&apos;th&apos;][3];
 		} catch(err) {
 			// skip it
 		} 			
 		// HTML: Make a list of the reference variables for later substitution in the XML.
 		try {
 			var numtrows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
 		} catch(err) {
 			var numtrows = 0;
 		}
 		var trowArr_famMem = new Array();
 		var trowArr_name = new Array();
 		var trowArr_ref = new Array();
 		for (var j=0;j&lt;numtrows;j++) {	
 			try {
 				trowArr_famMem[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;].toString();
 				if (trowArr_famMem[j].length == 0) {
 					trowArr_famMem[j] = &apos;Unspecified&apos;;
 				}
 			} catch(err) {
 				trowArr_famMem[j] = &apos;Unspecified&apos;;
 			}
 			try {
 				trowArr_name[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1][&apos;content&apos;].toString().replace(/[\&quot;]/g, &apos;&apos;);
 			} catch(err) {
 				trowArr_name[j] = &apos;&apos;;
 			}
 			try {
 				trowArr_ref[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1][&apos;content&apos;][&apos;@ID&apos;].toString();
 			} catch(err) {
 				trowArr_ref[j] = &apos;&apos;;
 			}
 			// HTML: Remove the Status column, per NextGen.
 			try {
 				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][3];
 			} catch(err) {
 				// skip it
 			} 			
 		}
 		try {
 			var numentries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
 		} catch(err) {
 			var numentries = 0;
 		}
 		for (var k=0;k&lt;numentries;k++) {
			// XML: Remove the entry if it was removed in the HTML
			var done = false;
			var paranoiaCount = 0;
			while (!done) {
				paranoiaCount ++;
 				try {
 					var numEntryComps = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;].length();
 				} catch(err) {
 					var numEntryComps = 0;
 				} 
 				for (var l=0;l&lt;numEntryComps;l++) {
					try {
 						var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;value&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 					} catch(err) {
 						var entryRef = &apos;&apos;;
 					}
 					if (entryRef.length &gt; 2) {
 						var foundOrphanComp = true;
 						entryRef = entryRef.substr(1);				
						for (var j=0;j&lt;numtrows;j++) {
 							var trowref = &apos;&apos;+trowArr_ref[j];							
 							if (trowref.toUpperCase() == entryRef.toUpperCase()) {
 								foundOrphanComp = false;
 								break;
 							}
						}
						if (foundOrphanComp) {
							delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l];
							break;		
						}
 					} else {
 						foundOrphanComp = false;
 					}
 				}
				if (foundOrphanComp) {
					done = false;
				} else {
					done = true;
				}
				if (paranoiaCount &gt; 100) {
					done = true;
				}
 			} 		  			
 			// XML: Overwrite &quot;Diagnosis&quot; with the reference variable from the HTML section.
 			try {
 				var numEntryComps = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;].length();
 			} catch(err) {
 				var numEntryComps = 0;
 			} 			
 			for (var l=0;l&lt;numEntryComps;l++) {
 				try {
 					var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;value&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 				} catch(err) {
 					var entryRef = &apos;&apos;;
 				}
 				if (entryRef.length &gt; 2) {
 					entryRef = entryRef.substr(1);
 				}	
 				for (var j=0;j&lt;numtrows;j++) {
 					var trowfamMem = &apos;&apos;+trowArr_famMem[j];
 					var trowname = &apos;&apos;+trowArr_name[j];
 					var trowref = &apos;&apos;+trowArr_ref[j];
 					if (trowref.toUpperCase() == entryRef.toUpperCase()) {
 						try {
 							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = trowname;
  						} catch(err) {
 							// skip it
 						}
 						try {
  							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = trowname;
 						} catch(err) {
 							// skip it
 						} 					
 						try {
 							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;value&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;] = trowname;
 						} catch(err) {
 							// skip it
 						} 	
 						// XML: Overwrite &quot;Subject&quot; (family member) with the reference variable from the HTML section.
 						try {
 							var subj = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;subject&apos;][&apos;relatedSubject&apos;][&apos;code&apos;][&apos;@nullFlavor&apos;].toString();
 						} catch(err) {
 							var subj = &apos;&apos;; 				
 						}
 						if (subj.toUpperCase() == &apos;UNK&apos;) {
							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;subject&apos;][&apos;relatedSubject&apos;][&apos;code&apos;][&apos;@nullFlavor&apos;] = &quot;AXXN8&quot;+trowfamMem;
							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;subject&apos;][&apos;relatedSubject&apos;][&apos;code&apos;][&apos;@displayName&apos;] = trowfamMem;
 						}
 						break;
 					}
 				}
 				// The following was supplied by NG, but I tested it and it doesn&apos;t seem to work
				//var repstring =  &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;].toString();
			 	//msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;] = repstring.replace(/valuep/g, &apos;code&apos;); 				
 			} 						
 		}		
 		break;
 	}
}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>d7779077-1b28-40ce-a859-b5ee58c10919</id>
            <name>updateFunctionalStatus_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223893</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateFunctionalStatus_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
// FUNCTIONAL STATUS
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;47420-5&apos;) || compTitle.toUpperCase().search(&apos;FUNCTIONAL STATUS&apos;) != -1) {
		// Remove any blank entries
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}			
			if (textVal.toUpperCase() == &apos;UNK&apos; &amp;&amp; codeVal.toUpperCase() == &apos;UNK&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>4cd52dfe-806f-4152-b7fc-6712090b06f3</id>
            <name>updateHospitalInstructions_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706221515</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateHospitalInstructions_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
// HOSPITAL INSTRUCTIONS
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;8653-8&apos;) || compTitle.toUpperCase() == &apos;HOSPITAL DISCHARGE INSTRUCTIONS&apos;) {
		try {
			var hasEntry = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var hasEntry = 0;
		}
		if (hasEntry == 0) {
			delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
		}		
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>40de6149-e0fe-47d8-bda4-651aa82c14b3</id>
            <name>updateInstructions_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222591</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateInstructions_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
// INSTRUCTIONS
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;69730-0&apos;) || compTitle.toUpperCase() == &apos;INSTRUCTIONS&apos;) {
		try {
			var hasEntry = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var hasEntry = 0;
		}
		if (hasEntry == 0) {
			delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
		}
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>058a5571-d741-434c-98fe-b4d4c64873f8</id>
            <name>updateIZ_MP</name>
            <revision>2</revision>
            <lastModified>
              <time>1499706283335</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateIZ_MP(arg1) {
	//blah blah
default xml namespace = msg.namespace(&apos;&apos;);
// IMMUNIZATION
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;11369-6&apos;) || compTitle.toUpperCase().search(&apos;IMMUNIZATION&apos;) != -1) {
		// Remove any blank entries
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}			
			if (textVal.toUpperCase() == &apos;UNK&apos; &amp;&amp; (codeVal.toUpperCase() == &apos;UNK&apos; || codeVal == &apos;999&apos;)) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>5d5d1dcb-ff61-42c4-ad96-14f7abd42a4e</id>
            <name>updateIZ_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223988</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateIZ_NG(arg1) {
// IMMUNIZATION *****************************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;11369-6&apos;) || compTitle.toUpperCase().search(&apos;IMMUNIZATION&apos;) != -1) {
		// XML: Remove the component if there is only 1 unknown entry
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@nullFlavor&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}
	
			if (codeVal.toUpperCase() == &apos;UNK&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>8c81228d-3861-440b-b2f6-e52a2ea44d04</id>
            <name>updateMeds_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223582</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateMeds_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);	
// MEDICATIONS
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;10160-0&apos;) || compTitle.toUpperCase() == &apos;MEDICATIONS&apos;) {
		// Remove any blank entries
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}			
			if (textVal.toUpperCase() == &apos;UNK&apos; &amp;&amp; codeVal.toUpperCase() == &apos;UNK&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>597d356a-1c68-4d78-bb91-a419444887dd</id>
            <name>updateMeds_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706221907</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateMeds_NG(arg1) {
// MEDICATIONS ***************************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	

	if ((compTitle == &apos;10160-0&apos;) || compTitle.toUpperCase().search(&apos;MEDICATIONS&apos;) != -1) {
		// HTML: Remove the trailing &apos; - &apos; from the Start-Stop date range when there is no Stop date
		try {
			var numRows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
		} catch(err) {
			var numRows = 0;
		}
		for (var t=0;t&lt;numRows;t++) {
			try {
				var dateRange = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][3][&apos;content&apos;].toString();
			} catch(err) {
				var dateRange = &apos;&apos;;
			}
			var dateLen = dateRange.length;
			if (dateLen &gt; 2) {
				var last3Indx = dateLen-3;
				var last3 = dateRange.substr(last3Indx,3);
				if (last3 == &apos; - &apos;) {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][3][&apos;content&apos;] = dateRange.substring(0,last3Indx);
				}
			}
			try {
				var dateRange = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][3].toString();
			} catch(err) {
				var dateRange = &apos;&apos;;
			}
			var dateLen = dateRange.length;
			if (dateLen &gt; 2) {
				var last3Indx = dateLen-3;
				var last3 = dateRange.substr(last3Indx,3);
				if (last3 == &apos; - &apos;) {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][3] = dateRange.substring(0,last3Indx);
				}
			}			
		}
		// XML: Remove component if there&apos;s only 1 blank entry
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@nullFlavor&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}
	
			if (codeVal == &apos;NI&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}		
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>e468a6e0-f561-4f3a-81de-48187186519b</id>
            <name>updatePlanOfCare_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222346</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updatePlanOfCare_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
//PLAN OF CARE
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;18776-5&apos;) || compTitle.toUpperCase() == &apos;PLAN OF CARE&apos;) {
		// HTML: Remove the substance (meds) entries from Plan of Care. They are also under Medications and create duplicates
		try {
 			var numentries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
 		} catch(err) {
 			var numentries = 0;
 		}
 		for (var k=0;k&lt;numentries;k++) {
			var done = false;
			var paranoiaCount = 0;
			while (!done) {
				paranoiaCount ++;
 				try {
 					var numEntryComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;substanceAdministration&apos;].length();
 				} catch(err) {
 					var numEntryComps = 0;
 				} 
 				var deletedSeg = false;
 				for (var l=0;l&lt;numEntryComps;l++) {
					try {
 						var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;substanceAdministration&apos;][l][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
 					} catch(err) {
 						var codeVal = &apos;&apos;;
 					}
 					if (codeVal.toUpperCase() == &apos;UNK&apos;) {
						delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;substanceAdministration&apos;][l];
						deletedSeg = true;
						break;		
 					} 
 				}
				if (deletedSeg) {
					done = false;
				} else {
					done = true;
				}
				if (paranoiaCount &gt; 100) {
					done = true;
				}
 			} 		  		
 		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>3e7d82fb-ce7d-42f7-937e-a7292078425a</id>
            <name>updatePlanOfCare_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223243</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This function cleans up the Plan of Care section for NextGen messages

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updatePlanOfCare_NG(arg1) {
// PLAN OF CARE ***********************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}	
 	if ((compTitle == &apos;18776-5&apos;) || compTitle.toUpperCase().search(&quot;PLAN OF CARE&quot;) != -1) {
		try {
			var sectEntryCount = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var sectEntryCount = 0;
		}
		sectEntryCount--;
 		//remove future appts -- they create completely blank Inpatient Encounters
		for (var j=sectEntryCount;j&gt;=0;j--)  {                                         
			try {
				var isEnc = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;encounter&apos;][&apos;@classCode&apos;].toString();
			} catch(err) {
				var isEnc = &apos;&apos;;
			}
			if (isEnc.toUpperCase() == &apos;ENC&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j];
			}
		}          		
 		//remove sbadm entries -- they create completely blank Medications
		for (var j=sectEntryCount;j&gt;=0;j--)  {                                         
			try {
				var isSdbAdm = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;substanceAdministration&apos;][&apos;@classCode&apos;].toString();
			} catch(err) {
				var isSdbAdm = &apos;&apos;;
			}
			if (isSdbAdm.toUpperCase() == &apos;SBADM&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j];
			}
		}          		
 	}
}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>96f3d440-90df-4143-8ed7-f4c216f7077f</id>
            <name>updateProblems_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223085</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateProblems_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
// PROBLEMS ********************************
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}

	if ((compTitle == &apos;11450-4&apos;) || compTitle.toUpperCase().search(&apos;ENCOUNTER DIAGNOSIS&apos;) != -1) {
		// Remove component if only one entry and it&apos;s blank
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;text&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}	
			if (textVal.length == 0 || textVal == &apos;UNK&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>34f29e3b-73fd-49a6-a353-dc1a10c2090c</id>
            <name>updateProblems_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222505</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateProblems_NG(arg1) {
// PROBLEMS ********************************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}

	if ((compTitle == &apos;11450-4&apos;) || compTitle.toUpperCase().search(&apos;PROBLEMS&apos;) != -1) {
		// HTML: Remove the row if there is no Condition identified
		var done = false;
		var paranoiaCount = 0;
		while (!done) {
			paranoiaCount ++;
			try {
				var numRows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
			} catch(err) {
				var numRows = 0;
			}
			var foundEmptyLine = false;
			for (var j=0;j&lt;numRows;j++) {
				try {
					var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;].toString();
				} catch(err) {
					var textVal = &apos;&apos;;
				}
				if (textVal.length == 0) {
					delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j];
					foundEmptyLine = true;
					break;							
				}
			}
			if (foundEmptyLine) {
				done = false;
			} else if (j &gt;= numRows) {
				done = true;
			}
			if (paranoiaCount &gt; 100) {
				done = true;
			}
		}
		// HTML: Remove the trailing &apos; - &apos; from the Start-Stop date range when there is no Stop date
		try {
			var numRows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
		} catch(err) {
			var numRows = 0;
		}
		for (var t=0;t&lt;numRows;t++) {
			try {
				var dateRange = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][1][&apos;content&apos;].toString();
			} catch(err) {
				var dateRange = &apos;&apos;;
			}
			var dateLen = dateRange.length;
			if (dateLen &gt; 2) {
				var last3Indx = dateLen-3;
				var last3 = dateRange.substr(last3Indx,3);
				if (last3 == &apos; - &apos;) {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][1][&apos;content&apos;] = dateRange.substring(0,last3Indx);
				}
			}
			try {
				var dateRange = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][1].toString();
			} catch(err) {
				var dateRange = &apos;&apos;;
			}
			var dateLen = dateRange.length;
			if (dateLen &gt; 2) {
				var last3Indx = dateLen-3;
				var last3 = dateRange.substr(last3Indx,3);
				if (last3 == &apos; - &apos;) {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][t][&apos;td&apos;][1] = dateRange.substring(0,last3Indx);
				}
			}			
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>f633143c-501a-414a-868b-4b17d9017997</id>
            <name>updateProcedures_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223385</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateProcedures_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
// PROCEDURES
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;47519-4&apos;) || compTitle.toUpperCase() == &apos;PROCEDURES&apos;) {
		// Delete any blank entries
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;text&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}			
			if (textVal.toUpperCase() == &apos;UNK&apos; &amp;&amp; codeVal.toUpperCase() == &apos;UNK&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>d185907e-b971-41a3-96e9-9e4d91689251</id>
            <name>updateResults_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222731</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function updateResults_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
//LAB RESULTS
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;30954-2&apos;) || compTitle.search(&apos;LAB RESULTS&apos;) != -1) {
		// Remove any blank entries
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}			
			if (textVal.toUpperCase() == &apos;UNK&apos; &amp;&amp; codeVal.toUpperCase() == &apos;UNK&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		// Some values come in thru the originalText element, not the value element (e.g., &apos;negative&apos;)
		for (var e=0;e&lt;numEntries;e++) {
			try {
				var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;organizer&apos;][&apos;component&apos;].length();
			} catch(err) {
				var numComps = 0;
			}			
			for (var c=0;c&lt;numComps;c++) {
				try {
					var isValue = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;organizer&apos;][&apos;component&apos;][c][&apos;observation&apos;][&apos;value&apos;][&apos;@value&apos;].toString();
				} catch(err) {
					var isValue = &apos;&apos;;	
				}
				if (isValue.length == 0) {
					try {
						var origText = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;organizer&apos;][&apos;component&apos;][c][&apos;observation&apos;][&apos;value&apos;][&apos;originalText&apos;].toString();
					} catch(err) {
						var origText = &apos;&apos;;
					}
					if (origText.length &gt; 0) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;organizer&apos;][&apos;component&apos;][c][&apos;observation&apos;][&apos;value&apos;]=origText;						
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][e][&apos;organizer&apos;][&apos;component&apos;][c][&apos;observation&apos;][&apos;value&apos;][&apos;@xsi:type&apos;]=&apos;ST&apos;;
					}
				}
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>44eb093d-e6bc-4341-99e9-5d361bf76e68</id>
            <name>updateResults_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223426</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateResults_NG(arg1) {
// RESULTS ***********************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}	
 	if ((compTitle == &apos;30954-2&apos;) || compTitle.toUpperCase().search(&quot;RESULTS&quot;) != -1) {
		// Get rid of it if there are no results
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		var sectDeleted = false;
		var numCompObs = 0;
		var codeVal = &apos;&apos;;
		if (numEntries == 1) {
			try {
				var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;].length();
			} catch(err) {
				var numComps = 0;
			}			
			for (var j=0;j&lt;numComps;j++) {
				var numObs = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][j][&apos;observation&apos;].length();
				if (numObs == 1) {
					try {
						codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
					} catch(err) {
						codeVal = &apos;&apos;;
					}	
				}
				numCompObs = numCompObs+numObs;
			}
			if (numCompObs &lt;= 1) {
				if (codeVal.length == 0 || codeVal.toUpperCase() == &apos;UNK&apos;) {
					delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
					sectDeleted = true;
					break;
				}				
			}
			if (sectDeleted) {
				break;
			}
		}	 		
		// HTML: Make a list of the reference variables for later substitution in the XML.
 		try {
 			var numtrows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
 		} catch(err) {
 			var numtrows = 0;
 		}
 		var trowArr_name = new Array();
 		var trowArr_ref = new Array();
 		var trowArr_commentref = new Array();
 		var trowArr_comment = new Array();
 		for (var j=0;j&lt;numtrows;j++) {
 			try {
 				var thisRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;][&apos;@ID&apos;].toString();
 			} catch(err) {
 				var thisRef = &apos;&apos;;
 			}
 			try {
				var thisName = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;].toString(); 			
 			} catch(err) {
 				var thisName = &apos;&apos;;
 			}	
 			try {
 				var thiscommentRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][6][&apos;content&apos;][&apos;@ID&apos;].toString();
 			} catch(err) {
 				var thiscommentRef = &apos;&apos;;
 			} 			
 			try {
				var thisComment = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][6][&apos;content&apos;].toString(); 			
 			} catch(err) {
 				var thisComment = &apos;&apos;;
 			}	
			// Remove &quot;Panel Description: &quot; text
 			if (thisName.toUpperCase().search(&quot;PANEL DESCRIPTION: &quot;) != -1) {
 				thisName = thisName.replace(/Panel Description: /i, &apos;&apos;);
 				msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;] = thisName; 					
 			} 	
 			trowArr_ref[j] = thisRef;
 			trowArr_name[j] = thisName;	
 			trowArr_commentref[j] = thiscommentRef;
 			trowArr_comment[j] = thisComment;
 		}
		// XML: Overwrite &quot;panel&quot; with the reference variable from the HTML section.
 		try {
 			var numentries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
 			
 		} catch(err) {
 			var numentries = 0;
 		}
 		for (var k=0;k&lt;numentries;k++) { 	
 			try {
 				var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;code&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 			} catch(err) {
 				var entryRef = &apos;&apos;;
 			}
 			if (entryRef.length &gt; 2) {
 				entryRef = entryRef.substr(1);
 			}				
 			for (var j=0;j&lt;numtrows;j++) {
 				var trowname = &apos;&apos;+trowArr_name[j];
 				var trowref = &apos;&apos;+trowArr_ref[j]; 				
 				if ((trowref.toUpperCase() == entryRef.toUpperCase()) &amp;&amp; trowname.length &gt; 0 &amp;&amp; trowname.toUpperCase() != &apos;UNKNOWN&apos;) {					
 					try {
 						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;code&apos;][&apos;@code&apos;] = trowname;
  					} catch(err) {
 						// skip it
 					}									
 					break;
 				}
 			} 				
 		}
 		// XML: Overwrite &quot;result code&quot; with the reference variable from the HTML section.
 		try {
 			var numentries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
 			
 		} catch(err) {
 			var numentries = 0;
 		}
 		for (var k=0;k&lt;numentries;k++) { 	
 			try {
 				var panel = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
 			} catch(err) {
 				var panel = &apos;&apos;;
 			} 	 		
 			try {
 				var numEntryComps = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;].length();
 			} catch(err) {
 				var numEntryComps = 0;
 			} 			
 			for (var l=0;l&lt;numEntryComps;l++) {
 				try {
 					var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;text&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 				} catch(err) {
 					var entryRef = &apos;&apos;;
 				}
 				if (entryRef.length &gt; 2) {
 					entryRef = entryRef.substr(1);
 				} else {
 					continue;
 				}
 				try {
 					var entryCommentRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;entryRelationship&apos;][&apos;act&apos;][&apos;text&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 				} catch(err) {
 					var entryCommentRef = &apos;&apos;;
 				} 	
 				if (entryCommentRef.length &gt; 2) {
 					entryCommentRef = entryCommentRef.substr(1);
 				}
 				var result = &apos;&apos;;
 				for (var j=0;j&lt;numtrows;j++) {
 					var trowname = &apos;&apos;+trowArr_name[j];
 					var trowref = &apos;&apos;+trowArr_ref[j];
 					var trowcomment = &apos;&apos;+trowArr_comment[j];
 					var trowcommentref = &apos;&apos;+trowArr_commentref[j]; 					
 					if (trowref.toUpperCase() == entryRef.toUpperCase() &amp;&amp; trowname.toUpperCase() != &apos;UNKNOWN&apos;) {
 						result = trowname;
 						try {
 							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = trowname;
  						} catch(err) {
 							// skip it
 						}
 						try {
  							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = trowname;
 						} catch(err) {
 							// skip it
 						} 	
 						if (trowcommentref.toUpperCase() == entryCommentRef.toUpperCase() &amp;&amp; entryCommentRef.length &gt; 0) {
 							try {
 								var curComment = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;value&apos;].toString();
 								if (curComment.length == 0 || curComment.toUpperCase() == &apos;COMMENT&apos;) {
 									msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;value&apos;] = trowcomment;
 									msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;value&apos;][&apos;@xsi:type&apos;] = &apos;ST&apos;;
 								}
  							} catch(err) {
 								// skip it
 							}
 						}
 						break;
 					}
 				}
 				// XML: MR requires a non-NULL ID in order to display the item.
				try {
					var isNull = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;id&apos;][&apos;@nullFlavor&apos;].toString();
				} catch(err) {
					var isNull = &apos;&apos;;
				} 				
				if (isNull == &apos;UNK&apos;) {
					try {
						var ts = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;effectiveTime&apos;][&apos;@value&apos;].toString();
					} catch(err) {
						var ts = &apos;&apos;;
					}
					var newID = &apos;&apos;+panel+result+ts;
					newID = newID.replace(/\s/g,&apos;&apos;);
					if (newID.length &gt; 0) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;organizer&apos;][&apos;component&apos;][l][&apos;observation&apos;][&apos;id&apos;][&apos;@nullFlavor&apos;] = newID;
					}
				}
 			}
 		}
 		break;
 	}
}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>61e08f98-99ca-4fb0-8385-4d15c1c5e1ec</id>
            <name>updateSocialHistory_clone</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222643</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	mirthsupport test
*/
function updateSocialHistory_clone() {
default xml namespace = msg.namespace(&apos;&apos;);
	logger.info(&quot;SH clone testvar: &quot; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].toString());

	/*try {
		var x;
	} catch(err) {
		var y;
	}*/

	for (i = 0; i &lt; 25; i++) { 
    		var z;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>f7914885-5dc4-4186-a8fc-d9717e111167</id>
            <name>updateSocialHistory_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223770</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateSocialHistory_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
// SOCIAL HISTORY
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;29762-2&apos;) || compTitle.toUpperCase() == &apos;SOCIAL HISTORY&apos;) {
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		for (var j=0;j&lt;numEntries;j++) {
			// Overwrite the numeric codes with the text to make it more human readable
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;text&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
			if (textVal.length &gt; 0) {
				try {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = textVal;
				} catch(err) {
					//skip it
				}
			}
			try {
				var codSystemDisplName = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
			} catch(err) {
				var codSystemDisplName = &apos;&apos;;
			}
			if (codSystemDisplName.length &gt; 0) {
				try {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = codSystemDisplName;
				} catch(err) {
					//skip it
				}
			}	
			try {
				var valSystemDisplName = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@codeSystemName&apos;].toString();
			} catch(err) {
				var valSystemDisplName = &apos;&apos;;
			}
			if (valSystemDisplName.length &gt; 0) {
				try {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@codeSystem&apos;] = valSystemDisplName;
				} catch(err) {
					//skip it
				}
			}
		}
		// Remove this entry... there is no Question attached to it, and the answer is &quot;unknown smoking status&quot; even though subsequent smoking questions follow
		for (var j=0;j&lt;numEntries;j++) {
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}
			if (textVal == &apos;123456789&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j];
				break;
			}
		}		
		// Remove when there is just one entry that is set to &quot;UNK&quot;
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}
			if (codeVal == &apos;UNK&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j];
				break;
			}				
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>7013b852-8526-49e8-9420-f72dd77aff25</id>
            <name>updateSocialHistory_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706221435</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	CJ 1/21/2016 This function will update issues with the Social History section of CCD

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function updateSocialHistory_NG(arg1) {
// SOCIAL HISTORY **************************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
 	if ((compTitle == &apos;29762-2&apos;) || compTitle.toUpperCase().search(&quot;SOCIAL HISTORY&quot;) != -1) {
		// HTML: Remove the row if there is nothing in the Type column OR something in the Type column but nothing in either the Description or Quantity columns
		var done = false;
		var paranoiaCount = 0;
		while (!done) {
			paranoiaCount ++;
			try {
				var numRows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
			} catch(err) {
				var numRows = 0;
			}
			var foundEmptyLine = false;
			for (var j=0;j&lt;numRows;j++) {
				try {
					var textVal1 = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;].toString();
				} catch(err) {
					var textVal1 = &apos;&apos;;
				}
				if (textVal1.length == 0) {
					delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j];
					foundEmptyLine = true;
					break;							
				} else {
					try {
						var textVal2 = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1][&apos;content&apos;].toString();
						var hasContent = true;
					} catch(err) {
						var textVal2 = &apos;&apos;;
						var hasContent = false;
					}						
	
					if (!hasContent) {
						try {
							var textVal2 = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1].toString();
						} catch(err) {
							var textVal2 = &apos;&apos;;
						}						
					}
					try {
						var textVal3 = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][2][&apos;content&apos;].toString();
						var hasContent = true;
					} catch(err) {
						var textVal3 = &apos;&apos;;
						var hasContent = false;
					}						

					if (!hasContent) {
						try {
							var textVal3 = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][2].toString();
						} catch(err) {
							var textVal3 = &apos;&apos;;
						}						
					}
					if ((textVal2.length == 0) &amp;&amp; (textVal3.length == 0)) {
						delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j];
						foundEmptyLine = true;
						break;							
					}
				}
			}
			if (foundEmptyLine) {
				done = false;
			} else if (j &gt;= numRows) {
				done = true;
			}
			if (paranoiaCount &gt; 100) {
				done = true;
			}
		}
		// HTML: Make a list of the reference variables for later substitution in the XML.
 		try {
 			var numtrows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
 		} catch(err) {
 			var numtrows = 0;
 		}
 		var trowArr_name = new Array();
 		var trowArr_ref = new Array();
 		var trowArr_ans = new Array();
 		for (var j=0;j&lt;numtrows;j++) {
 			try {
 				trowArr_name[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;].toString();
 			} catch(err) {
 				trowArr_name[j] = &apos;&apos;;
 			}
 			try {
 				trowArr_ref[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;][&apos;@ID&apos;].toString();
 			} catch(err) {
 				trowArr_ref[j] = &apos;&apos;;
 			}
 			try {
 				trowArr_ans[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1][&apos;content&apos;].toString();
 			} catch(err) {
 				trowArr_ans[j] = &apos;&apos;;
 			} 			
 			// If answer is blank, display text: &quot;See Documents tab for the answer/details.&quot;
 			if (trowArr_ans[j].length == 0) {
 				trowArr_ans[j] = &quot;See Documents tab for the answer/details.&quot;;
 			} 			
 		}
		
		
		// XML: Remove the entry if it was removed in the HTML
		try {
 			var numentries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
 		} catch(err) {
 			var numentries = 0;
 		}
		for (k=numentries-1;k&gt;=0;k--) {
 			try {
 				var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;text&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 			} catch(err) {
 				var entryRef = &apos;&apos;;
 			}
 			if (entryRef.length == 0) {
				try {
 					var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 				} catch(err) {
 					var entryRef = &apos;&apos;;
 				} 						
 			}
 			if (entryRef.length &gt; 2) {
 				var foundOrphanObs = true;
 				entryRef = entryRef.substr(1);				
				for (var j=0;j&lt;numtrows;j++) {
 					var trowref = &apos;&apos;+trowArr_ref[j];							
 					if (trowref.toUpperCase() == entryRef.toUpperCase()) {
 						foundOrphanObs = false;
 						break;
 					}
				}
 			} else {
 				foundOrphanObs = false;
 			}
 			if (foundOrphanObs) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k];
			}
 		} 		  		
		
 		try {
 			var numentries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
 		} catch(err) {
 			var numentries = 0;
 		}
 		for (var k=0;k&lt;numentries;k++) {
 			// Do the NG fix
			// Smoking Status fix where observation id does not exist in entry
			var lenObs = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;].length();
			// // make sure there is at least 1 observation  in the CCD before trying to fix the missing ID for social history
			if (lenObs &gt; 0)
			{
        			fnFixMissingSocialHistoryID(msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;], lenObs);
			} // end if lenObs &gt; 0 			
 			// XML: Overwrite &quot;Question&quot; and &quot;Answer&quot; with the reference variables from the HTML section.
 			// Substitute question text only if there is no code being sent
 			try {
 				var isQuestionCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
  			} catch(err) {
 				var isQuestionCode = &apos;&apos;;
 			} 	
 			// Substitute answer text only if there is no code being sent
 			try {
 				var isAnswerCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
  			} catch(err) {
 				var isAnswerCode = &apos;&apos;;
 			} 
 			try {
 				var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;text&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 			} catch(err) {
 				var entryRef = &apos;&apos;;
 			}
 			if (entryRef.length == 0) {
				try {
 					var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 				} catch(err) {
 					var entryRef = &apos;&apos;;
 				} 						
 			} 				
 			if (entryRef.length &gt; 2) {
 				entryRef = entryRef.substr(1);
 			}	
 			for (var j=0;j&lt;numtrows;j++) {
 				var trowname = &apos;&apos;+trowArr_name[j];
 				var trowref = &apos;&apos;+trowArr_ref[j];
 				var trowans = &apos;&apos;+trowArr_ans[j];
 				if (trowref.toUpperCase() == entryRef.toUpperCase()) {
 					//Overwrite the question only if no code was sent
 					if (isQuestionCode.length == 0 || isQuestionCode.toUpperCase() == &apos;ASSERTION&apos;) {
 						try {
 							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = trowname;
  						} catch(err) {
 							// skip it
 						}
 						try {
  							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = trowname;
 						} catch(err) {
 							// skip it
 						} 	
 						try {
  							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;&apos;;
 						} catch(err) {
 							// skip it
 						} 
						try {
  							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;&apos;;
 						} catch(err) {
 							// skip it
 						}  	
 					}
 					if (isAnswerCode.length == 0) {
 						try {
 							var ansType = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@xsi:type&apos;].toString();
 						} catch(err) {
 							var ansType = &apos;&apos;;
 						}
  						try {
 							var ansNull = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@nullFlavor&apos;].toString()
 						} catch(err) {
 							var ansNull = &apos;&apos;;
 						}
 						if (ansType != &quot;CD&quot;) {
 							try {
 								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;] = trowans;
 								// Above overwrites attributes, but need to add back in
 								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@nullFlavor&apos;] = ansNull;
 								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@xsi:type&apos;] = &apos;ST&apos;;
 							} catch(err) {
 								// skip it
 							}  	
 						}						
 					}
 					break;
 				}
 			} 					
 		}

 		
 		// XML: MR requires a non-NULL ID in order to display the item.
		var done = false;
		var paranoiaCount = 0;
		while (!done) {
			paranoiaCount ++; 		
			try {
				var sectEntryCount = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
			} catch(err) {
				var sectEntryCount = 0;
			}
			for (var j=0;j&lt;sectEntryCount;j++) { 			
				var needID = false;
				try {
					var isNull = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@nullFlavor&apos;].toString();
					if (isNull == &apos;UNK&apos;) {
						needID = true;
					}
				} catch(err) {
					var isNull = &apos;&apos;;
				}
				if (isNull.length == 0) {
					try {
						var isRoot = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
					} catch(err) {
						var isRoot = &apos;&apos;;
					}	
					if (isRoot.length == 0) {
						needID = true;
					}
				}
				done = true;
				if (needID) {
					done = false;
 					try {
 						var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;text&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 					} catch(err) {
 						var entryRef = &apos;&apos;;
 					}
 					if (entryRef.length == 0) {
						try {
 							var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 						} catch(err) {
 							var entryRef = &apos;&apos;;
 						} 						
 					} 				
 					if (entryRef.length &gt; 2) {
 						entryRef = entryRef.substr(1);
 					}		
 					if (entryRef.length &gt; 2) {
 						var underscoreIdx = entryRef.search(&apos;_&apos;);
 						if (underscoreIdx != -1) {
 							entryRef = entryRef.substring(0,underscoreIdx);
 						}
 					}
 					try {
 						var idSegExists = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;].length();
 					} catch(err) {
 						var idSegExists = 0;
 					}
 					if (idSegExists &gt; 0) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@nullFlavor&apos;] = entryRef;
 					} else {
 						// insertBefore doesn&apos;t work, and appendChild adds it to the bottom. MR doesn&apos;t seem to like it there so this inserts the
 						// id element where the others are -- after the templateID element and before the code element
 						// Some do not send templateID element
						var obsStr = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;].toString();
						var idSegVal = &apos;&lt;id root=&quot;&apos;+entryRef+&apos;&quot;/&gt;&lt;code&apos;;
						var obsStr = obsStr.replace(&quot;&lt;code&quot;,idSegVal);
						var obsXml = new XML(obsStr);
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j] = obsXml;
						//update msg
						var msgStr = msg.toString();
						msg = new XML(msgStr);	
 					} // } else {
 					break; //Whenever the tree structure is changed, need to start all over otherwise Mirth fails
				} // if (needID) {
			} // for (var j=0;j&lt;sectEntryCount;j++) { 
			if (paranoiaCount &gt; 100) {done = true;}
 		}  // while (!done) {
 		break;
 	}  // if ((compTitle == &apos;29762-2&apos;) ... {
} // for (var i=0;i&lt;numComps;i++) {
} // function updateSocialHistory_NG(arg1) {</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>815ec0e8-83b7-4cfe-88bd-ef9b27a99202</id>
            <name>updateSocialHistory_NG_New_CJ</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222221</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Cody&apos;s Edits

	@param {String} arg1 - the CDA to be modified
	@return {String} return returns a modified CDA
*/
function updateSocialHistory_NG_New_CJ(arg1) {
// SOCIAL HISTORY
default xml namespace = msg.namespace(&apos;&apos;);
logger.info(&quot;SH testvar: &quot; + msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].toString());
//logger.info(&apos;This is SocialHistory message: &apos; + msg)
//var test2 = msg.attributes();

try {numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
//logger.info(&apos;This is SocialHistory message Namespaces: &apos; + test2)
//msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
//logger.info(&apos;This is SocialHistory message after try: &apos; + msg)
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
 	if ((compTitle == &apos;29762-2&apos;) || compTitle.toUpperCase().search(&quot;SOCIAL HISTORY&quot;) != -1) {
		// HTML: Remove the row if there is nothing in the Type column OR something in the Type column but nothing in either the Description or Quantity columns
		var done = false;
		var paranoiaCount = 0;
		while (!done) {
			paranoiaCount ++;
			try {
				var numRows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
			} catch(err) {
				var numRows = 0;
			}
			var foundEmptyLine = false;
			for (var j=0;j&lt;numRows;j++) {
				try {
					var textVal1 = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;].toString();
				} catch(err) {
					var textVal1 = &apos;&apos;;
				}
				if (textVal1.length == 0) {
					delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j];
					foundEmptyLine = true;
					break;							
				} else {
					try {
						var textVal2 = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1].toString();
					} catch(err) {
						var textVal2 = &apos;&apos;;
					}		
					try {
						var textVal3 = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][2].toString();
					} catch(err) {
						var textVal3 = &apos;&apos;;
					}	
					if ((textVal2.length == 0) &amp;&amp; (textVal3.length == 0)) {
						delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j];
						foundEmptyLine = true;
						break;							
					}
				}
			}
			if (foundEmptyLine) {
				done = false;
			} else if (j &gt;= numRows) {
				done = true;
			}
			if (paranoiaCount &gt; 100) {
				done = true;
			}
		}
		// HTML: Make a list of the reference variables for later substitution in the XML.
 		try {
 			var numtrows = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;].length();
 		} catch(err) {
 			var numtrows = 0;
 		}
 		var trowArr_name = new Array();
 		var trowArr_ref = new Array();
 		var trowArr_ans = new Array();
 		for (var j=0;j&lt;numtrows;j++) {
 			try {
 				trowArr_name[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;].toString();
 			} catch(err) {
 				trowArr_name[j] = &apos;&apos;;
 			}
 			try {
 				trowArr_ref[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][0][&apos;content&apos;][&apos;@ID&apos;].toString();
 			} catch(err) {
 				trowArr_ref[j] = &apos;&apos;;
 			}
 			try {
 				trowArr_ans[j] = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;text&apos;][&apos;table&apos;][&apos;tbody&apos;][&apos;tr&apos;][j][&apos;td&apos;][1][&apos;content&apos;].toString();
 			} catch(err) {
 				trowArr_ans[j] = &apos;&apos;;
 			} 			
 			// If answer is blank, display text: &quot;See Documents tab for the answer/details.&quot;
 			if (trowArr_ans[j].length == 0) {
 				trowArr_ans[j] = &quot;See Documents tab for the answer/details.&quot;;
 			} 			
 		}
 		try {
 			var numentries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
 		} catch(err) {
 			var numentries = 0;
 		}
 		for (var k=0;k&lt;numentries;k++) {
			// XML: Remove the entry if it was removed in the HTML
			var done = false;
			var paranoiaCount = 0;
			while (!done) {
				paranoiaCount ++;
 				try {
 					var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;text&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 				} catch(err) {
 					var entryRef = &apos;&apos;;
 				}
 				if (entryRef.length == 0) {
					try {
 						var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 					} catch(err) {
 						var entryRef = &apos;&apos;;
 					} 						
 				}
 				if (entryRef.length &gt; 2) {
 					var foundOrphanObs = true;
 					entryRef = entryRef.substr(1);				
					for (var j=0;j&lt;numtrows;j++) {
 						var trowref = &apos;&apos;+trowArr_ref[j];							
 						if (trowref.toUpperCase() == entryRef.toUpperCase()) {
 							foundOrphanObs = false;
 							break;
 						}
					}
					if (foundOrphanObs) {
						delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k];
						break;		
					}
 				} else {
 					foundOrphanObs = false;
 				}
 				if (foundOrphanObs) {
					done = false;
				} else {
					done = true;
				}
				if (paranoiaCount &gt; 100) {
					done = true;
				}
 			} 		  			
 			// XML: Overwrite &quot;Question&quot; and &quot;Answer&quot; with the reference variables from the HTML section.
 			// Substitute question text only if there is no code being sent
 			try {
 				var isQuestionCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
  			} catch(err) {
 				var isQuestionCode = &apos;&apos;;
 			} 	
 			// Substitute answer text only if there is no code being sent
 			try {
 				var isAnswerCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
  			} catch(err) {
 				var isAnswerCode = &apos;&apos;;
 			} 
 			try {
 				var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;text&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 			} catch(err) {
 				var entryRef = &apos;&apos;;
 			}
 			if (entryRef.length == 0) {
				try {
 					var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 				} catch(err) {
 					var entryRef = &apos;&apos;;
 				} 						
 			} 				
 			if (entryRef.length &gt; 2) {
 				entryRef = entryRef.substr(1);
 			}	
 			for (var j=0;j&lt;numtrows;j++) {
 				var trowname = &apos;&apos;+trowArr_name[j];
 				var trowref = &apos;&apos;+trowArr_ref[j];
 				var trowans = &apos;&apos;+trowArr_ans[j];
 				if (trowref.toUpperCase() == entryRef.toUpperCase()) {
 					//Overwrite the question only if no code was sent
 					if (isQuestionCode.length == 0 || isQuestionCode.toUpperCase() == &apos;ASSERTION&apos;) {
 						try {
 							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;] = trowname;
  						} catch(err) {
 							// skip it
 						}
 						try {
  							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;] = trowname;
 						} catch(err) {
 							// skip it
 						} 	
 						try {
  							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] = &apos;&apos;;
 						} catch(err) {
 							// skip it
 						} 
						try {
  							msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] = &apos;&apos;;
 						} catch(err) {
 							// skip it
 						}  	
 					}
 					if (isAnswerCode.length == 0) {
 						try {
 							var ansType = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@xsi:type&apos;].toString();
 						} catch(err) {
 							var ansType = &apos;&apos;;
 						}
  						try {
 							var ansNull = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@nullFlavor&apos;].toString()
 						} catch(err) {
 							var ansNull = &apos;&apos;;
 						}
 						if (ansType != &quot;CD&quot;) {
 							try {
 								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;] = trowans;
 								// Above overwrites attributes, but need to add back in
 								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@nullFlavor&apos;] = ansNull;
 								msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][k][&apos;observation&apos;][&apos;value&apos;][&apos;@xsi:type&apos;] = &apos;ST&apos;;
 							} catch(err) {
 								// skip it
 							}  	
 						}						
 					}
 					break;
 				}
 			} 					
 		}
 		// XML: MR requires a non-NULL ID in order to display the item.
		try {
			var sectEntryCount = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var sectEntryCount = 0;
		}
		for (var j=0;j&lt;sectEntryCount;j++) { 			
			var needID = false;
			try {
				var isNull = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@nullFlavor&apos;].toString();
				if (isNull == &apos;UNK&apos;) {
					needID = true;
				}
			} catch(err) {
				var isNull = &apos;&apos;;
			}
			if (isNull.length == 0) {
				try {
					var isRoot = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} catch(err) {
					var isRoot = &apos;&apos;;
				}	
				if (isRoot.length == 0) {
					needID = true;
				}
			}
			if (needID) {
 				try {
 					var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;text&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 				} catch(err) {
 					var entryRef = &apos;&apos;;
 				}
 				if (entryRef.length == 0) {
					try {
 						var entryRef = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;originalText&apos;][&apos;reference&apos;][&apos;@value&apos;].toString();
 					} catch(err) {
 						var entryRef = &apos;&apos;;
 					} 						
 				} 				
 				if (entryRef.length &gt; 2) {
 					entryRef = entryRef.substr(1);
 				}		
 				if (entryRef.length &gt; 2) {
 					var underscoreIdx = entryRef.search(&apos;_&apos;);
 					if (underscoreIdx != -1) {
 						entryRef = entryRef.substring(0,underscoreIdx);
 					}
 				}
 				try {
 					var idSegExists = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;].length();
 				} catch(err) {
 					var idSegExists = 0;
 				}
 				if (idSegExists &gt; 0) {
					msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@nullFlavor&apos;] = entryRef;
 				} else {
 					// insertBefore doesn&apos;t work, and appendChild adds it to the bottom. MR doesn&apos;t seem to like it there so this inserts the
 					// id element where the others are -- after the templateID element and before the code element
 					// Some do not send templateID element
 					try {
 						var isTemplateID = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;templateId&apos;].length();
 					} catch(err) {
 						var isTemplateID = 0;
 					}
 					if (isTemplateID &gt; 0) {
 						try {
 							var templateVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString();
 						} catch(err) {
 							var templateVal = &apos;&apos;;
 						}
 						if (templateVal.length &gt; 0) {
 							templateVal += &quot;AXXNSHID&quot;;
 						}
 						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;templateId&apos;][&apos;@root&apos;] = templateVal;
 						var tmpMsgStr = &apos;&apos;+msg.toString();					
 						var splitMsg = tmpMsgStr.split(/AXXNSHID\&quot;\/\&gt;\&lt;code/); 	
 						if (splitMsg.length == 2) {			
 							var newMsgStr = splitMsg[0]+&apos;&quot;/&gt;&lt;id root=&quot;&apos;+entryRef+&apos;&quot;/&gt;&lt;code&apos;+splitMsg[1];
 							msg = new XML(newMsgStr);
 						}  						
 					} else {
						try {
 							var ObsVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;@moodCode&apos;].toString();
 						} catch(err) {
 							var ObsVal = &apos;&apos;;
 						}
 						if (ObsVal.length &gt; 0) {
 							ObsVal += &quot;AXXNSHID&quot;;
 						}
 						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][j][&apos;observation&apos;][&apos;@moodCode&apos;] = ObsVal; 
 						var tmpMsgStr = &apos;&apos;+msg.toString();					
 						var splitMsg = tmpMsgStr.split(/AXXNSHID\&quot;\&gt;\&lt;code/); 	
 						if (splitMsg.length == 2) {			
 							var newMsgStr = splitMsg[0]+&apos;&quot;&gt;&lt;id root=&quot;&apos;+entryRef+&apos;&quot;/&gt;&lt;code&apos;+splitMsg[1];
 							msg = new XML(newMsgStr);
 						} 						
 					}
 				}
			}
		}
		break;
 	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>9d49a192-0817-40a9-92bf-258345554583</id>
            <name>updateVitals_MP</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706222073</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateVitals_MP(arg1) {
default xml namespace = msg.namespace(&apos;&apos;);
// VITAL SIGNS
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &apos;8716-3&apos;) || compTitle.toUpperCase().search(&apos;VITAL SIGN&apos;) != -1) {
		// Remove component if only one entry and it&apos;s blank
		try {
			var numEntries = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;].length();
		} catch(err) {
			var numEntries = 0;
		}
		if (numEntries == 1) {
			try {
				var codeVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
			} catch(err) {
				var codeVal = &apos;&apos;;
			}
			try {
				var textVal = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][&apos;observation&apos;][&apos;value&apos;][&apos;@value&apos;].toString();
			} catch(err) {
				var textVal = &apos;&apos;;
			}	
			if (codeVal == &apos;NI&apos; &amp;&amp; textVal == &apos;0&apos;) {
				delete msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i];
				break;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>80e840c0-89e7-440b-9a9c-620fe30fb424</id>
            <name>updateVitals_NG</name>
            <revision>1</revision>
            <lastModified>
              <time>1499706223045</time>
              <timezone>Universal</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateVitals_NG(arg1) {
// VITAL SIGNS ******************************
default xml namespace = msg.namespace(&apos;&apos;);
try {
	var numComps = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;].length();
} catch(err) {
	var numComps = 0;
}
for (var i=0;i&lt;numComps;i++) {
	try {
		var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
	} catch(err) {
		var compTitle = &apos;&apos;;
	}
	if (compTitle.length == 0) {
		try {
			var compTitle = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;title&apos;].toString();
		} catch(err) {
			var compTitle = &apos;&apos;;
		}
	}
	if ((compTitle == &quot;8716-3&quot;) || compTitle.toUpperCase().search(&quot;VITAL SIGNS&quot;) != -1) {
		// XML: MR requires a non-NULL ID in order to display the item. 
		try {
			var sectEntryCount = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;].length();
		} catch(err) {
			var sectEntryCount = 0;
		}
		for (var j=0;j&lt;sectEntryCount;j++) { 			
			try {
				var isNull = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@nullFlavor&apos;].toString();
				if (isNull == &apos;UNK&apos;) {
					// Is there really something to show?
					var vitalCode = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][j][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
					if (vitalCode.length &gt; 0) {
						msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][j][&apos;observation&apos;][&apos;id&apos;][&apos;@nullFlavor&apos;] = &apos;SUBID&apos;+j.toString();
					}
				}
			} catch(err) {
				var isNull = &apos;&apos;;
			}
			try {
				var unit = &apos;&apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@unit&apos;].toString();
				unit = unit.toUpperCase();
			} catch(err) {
				var unit = &apos;&apos;;
			}
			// Put in more descriptive text
			if (unit == &apos;[IN_US]&apos;) {
				msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@unit&apos;] = &apos;in&apos;;
			} else if (unit == &apos;[LB_AV]&apos;) {
				msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][i][&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][j][&apos;observation&apos;][&apos;value&apos;][&apos;@unit&apos;] = &apos;lb&apos;;
			}
		}
		break;
	}
}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>